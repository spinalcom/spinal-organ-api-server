{
  "openapi": "3.0.1",
  "info": {
    "title": "SpinalCore Graph API",
    "version": "1.0.0",
    "description": "Welcome to the reference documentation for the Spinalcore Digital Twin REST API! </br></br>To learn about the common use cases and concept of Spinalcore REST APIs, check out our resource center  (https://resourcecenter.fr.spinalcom.com/ressources-d%C3%A9veloppeur).</br></br>In addition to Spinalcore API Reference, we also provide complete documentation for integrator that need to install and implement Spinalcore Digital Twin Operating System on their built environment (https://resourcecenter.fr.spinalcom.com/ressources-int%C3%A9grateur)",
    "termsOfService": "",
    "contact": {
      "email": "developers@spinalcom.com"
    },
    "x-logo": {
      "url": "/logo.png"
    },
    "x-preferred": true,
    "x-providerName": "spinalcom.com",
    "x-unofficialSpec": true
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "Context": {
        "type": "object",
        "properties": {
          "dynamicId": {
            "type": "integer"
          },
          "staticId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "BIMFileContext": {
        "type": "object",
        "properties": {
          "dynamicId": {
            "type": "integer"
          },
          "staticId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BIMFileContextItems"
            }
          }
        },
        "required": [
          "dynamicId",
          "staticId",
          "name",
          "type",
          "items"
        ]
      },
      "BIMFileContextItems": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "thumbnail": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "path"
        ]
      },
      "NodeWithDate": {
        "type": "object",
        "properties": {
          "dynamicId": {
            "type": "integer"
          },
          "staticId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "directModificationDate": {
            "type": "integer"
          },
          "indirectModificationDate": {
            "type": "integer"
          }
        }
      },
      "ContextNodeofTypes": {
        "type": "object",
        "properties": {
          "dynamicId": {
            "type": "integer"
          },
          "staticId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "ContextTree": {
        "type": "object",
        "properties": {
          "dynamicId": {
            "type": "integer"
          },
          "staticId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "context": {
            "type": "string"
          },
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContextTree"
            }
          }
        },
        "example": {
          "dynamicId": 377295296,
          "staticId": "SpinalContext-b61aca38-c262-56bd-9b3b-72fba07999a4-173a52a9bd8",
          "name": "Scenes",
          "type": "SpinalService",
          "context": "SpinalContext",
          "children": [
            {
              "dynamicId": 377301280,
              "staticId": "SpinalNode-c04c8302-ef21-7fa1-3435-8bf1ecd717b8-173a52a9bde",
              "name": "bim",
              "type": "scene",
              "children": []
            }
          ]
        }
      },
      "ContextNodeTypeList": {
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      "Node": {
        "type": "object",
        "properties": {
          "dynamicId": {
            "type": "integer"
          },
          "staticId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "children_relation_list": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Relation"
            }
          }
        }
      },
      "BasicNode": {
        "type": "object",
        "properties": {
          "dynamicId": {
            "type": "integer"
          },
          "staticId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "BasicNodeMultiple": {
        "type": "object",
        "properties": {
          "dynamicId": {
            "type": "integer"
          },
          "nodes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BasicNode"
            }
          }
        }
      },
      "Relation": {
        "type": "object",
        "properties": {
          "dynamicId": {
            "type": "integer"
          },
          "staticId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "children_number": {
            "type": "integer"
          }
        }
      },
      "EndPointNode": {
        "type": "object",
        "properties": {
          "dynamicId": {
            "type": "integer"
          },
          "staticId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "currentValue": {
            "type": "integer"
          }
        }
      },
      "EndPointNodeWithId": {
        "type": "object",
        "properties": {
          "dynamicId": {
            "type": "integer"
          },
          "endpoints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EndPointNode"
            }
          }
        }
      },
      "NodeAttribut": {
        "type": "object",
        "properties": {
          "dynamicId": {
            "type": "integer"
          },
          "staticId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "attributs": {
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/Attributs"
                }
              ]
            }
          }
        }
      },
      "Attributs": {
        "type": "object",
        "properties": {
          "label": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "date": {
            "type": "integer"
          },
          "type": {
            "type": "integer"
          },
          "unit": {
            "type": "integer"
          }
        }
      },
      "Building": {
        "type": "object",
        "properties": {
          "dynamicId": {
            "type": "integer"
          },
          "staticId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "adress": {
            "type": "string"
          },
          "area": {
            "type": "integer"
          }
        }
      },
      "Floor": {
        "type": "object",
        "properties": {
          "dynamicId": {
            "type": "integer"
          },
          "staticId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "FloorDetails": {
        "type": "object",
        "properties": {
          "area": {
            "type": "integer"
          },
          "bimFileId": {
            "type": "string"
          },
          "_bimObjects": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "staticId": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "type": {
                  "type": "string"
                },
                "version": {
                  "type": "integer"
                },
                "externalId": {
                  "type": "string"
                },
                "dbid": {
                  "type": "integer"
                }
              }
            }
          }
        }
      },
      "Room": {
        "type": "object",
        "properties": {
          "dynamicId": {
            "type": "integer"
          },
          "staticId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "ControlEndpoint": {
        "type": "object",
        "properties": {
          "dynamicId": {
            "type": "integer"
          },
          "staticId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "category": {
            "type": "string"
          },
          "value": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "integer"
              },
              {
                "type": "boolean"
              }
            ]
          }
        }
      },
      "RoomDetails": {
        "type": "object",
        "properties": {
          "area": {
            "type": "integer"
          },
          "bimFileId": {
            "type": "string"
          },
          "_bimObjects": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "staticId": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "type": {
                  "type": "string"
                },
                "version": {
                  "type": "integer"
                },
                "externalId": {
                  "type": "string"
                },
                "dbid": {
                  "type": "integer"
                }
              }
            }
          }
        }
      },
      "RoomDetailsWithId": {
        "type": "object",
        "properties": {
          "dynamicId": {
            "type": "integer"
          },
          "area": {
            "type": "integer"
          },
          "bimFileId": {
            "type": "string"
          },
          "_bimObjects": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "staticId": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "type": {
                  "type": "string"
                },
                "version": {
                  "type": "integer"
                },
                "externalId": {
                  "type": "string"
                },
                "dbid": {
                  "type": "integer"
                }
              }
            }
          }
        }
      },
      "Equipement": {
        "type": "object",
        "properties": {
          "dynamicId": {
            "type": "integer"
          },
          "staticId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "bimFileId": {
            "type": "string"
          },
          "version": {
            "type": "number"
          },
          "externalId": {
            "type": "string"
          },
          "dbid": {
            "type": "string"
          }
        }
      },
      "EndPointRoom": {
        "type": "object",
        "properties": {
          "dynamicId": {
            "type": "integer"
          },
          "staticId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "currentValue": {
            "type": "integer"
          }
        }
      },
      "Note": {
        "type": "object",
        "properties": {
          "userName": {
            "type": "string"
          },
          "date": {
            "type": "integer"
          },
          "type": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "Position": {
        "type": "object",
        "properties": {
          "dynamicId": {
            "type": "integer"
          },
          "staticId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "info": {
            "type": "object",
            "properties": {
              "context": {
                "$ref": "#/components/schemas/Context"
              },
              "building": {
                "$ref": "#/components/schemas/Building"
              },
              "floor": {
                "$ref": "#/components/schemas/Floor"
              },
              "room": {
                "$ref": "#/components/schemas/Room"
              }
            }
          }
        }
      },
      "RoomPosition": {
        "type": "object",
        "properties": {
          "dynamicId": {
            "type": "integer"
          },
          "staticId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "info": {
            "type": "object",
            "properties": {
              "context": {
                "$ref": "#/components/schemas/Context"
              },
              "building": {
                "$ref": "#/components/schemas/Building"
              },
              "floor": {
                "$ref": "#/components/schemas/Floor"
              }
            }
          }
        }
      },
      "StaticDetailsRoom": {
        "type": "object",
        "properties": {
          "dynamicId": {
            "type": "integer"
          },
          "staticId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "bimFileId": {
            "type": "string"
          },
          "version": {
            "type": "number"
          },
          "externalId": {
            "type": "string"
          },
          "dbid": {
            "type": "string"
          },
          "attributs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Attributs"
            }
          },
          "controlEndpoint": {
            "type": "object",
            "properties": {
              "profileName": {
                "type": "string"
              },
              "endpoints": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ControlEndpoint"
                }
              }
            }
          },
          "bimObjects": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Equipement"
            }
          },
          "groupParents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Room"
            }
          }
        }
      },
      "StaticDetailsEquipment": {
        "type": "object",
        "properties": {
          "dynamicId": {
            "type": "integer"
          },
          "staticId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "attributs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Attributs"
            }
          },
          "controlEndpoint": {
            "type": "object",
            "properties": {
              "profileName": {
                "type": "string"
              },
              "endpoints": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Room"
                }
              }
            }
          },
          "groupParents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Room"
            }
          }
        }
      },
      "InventoryRoomDetails": {
        "type": "object",
        "properties": {
          "dynamicId": {
            "type": "string"
          },
          "staticId": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "inventories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InventoryEquipmentCategory"
            }
          }
        }
      },
      "InventoryEquipmentCategory": {
        "type": "object",
        "properties": {
          "staticId": {
            "type": "string"
          },
          "dynamicId": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "inventory": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InventoryEquipmentGroup"
            }
          }
        }
      },
      "InventoryEquipmentGroup": {
        "type": "object",
        "properties": {
          "staticId": {
            "type": "string"
          },
          "dynamicId": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "equipments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InventoryBIMObject"
            }
          }
        }
      },
      "InventoryBIMObject": {
        "type": "object",
        "properties": {
          "staticId": {
            "type": "string"
          },
          "dynamicId": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "dynamicId": {
            "type": "integer",
            "format": "int64"
          },
          "error": {
            "type": "string"
          }
        }
      },
      "RoomReferenceObjectResponse": {
        "type": "object",
        "properties": {
          "dynamicId": {
            "type": "integer"
          },
          "staticId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "bimFileId": {
            "type": "string"
          },
          "infoReferencesObjects": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Equipement"
            }
          }
        }
      },
      "IoTNetwork": {
        "type": "object",
        "properties": {
          "dynamicId": {
            "type": "integer"
          },
          "staticId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "IoTNetworkTree": {
        "type": "object",
        "properties": {
          "dynamicId": {
            "type": "integer"
          },
          "staticId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "IoTNetwork": {
            "type": "string"
          },
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IoTNetworkTree"
            }
          }
        },
        "example": {
          "dynamicId": 377295296,
          "staticId": "SpinalContext-b61aca38-c262-56bd-9b3b-72fba07999a4-173a52a9bd8",
          "name": "Scenes",
          "type": "SpinalService",
          "context": "SpinalContext",
          "children": [
            {
              "dynamicId": 377301280,
              "staticId": "SpinalNode-c04c8302-ef21-7fa1-3435-8bf1ecd717b8-173a52a9bde",
              "name": "bim",
              "type": "scene",
              "children": []
            }
          ]
        }
      },
      "EndPointNodeAttribut": {
        "type": "object",
        "properties": {
          "dynamicId": {
            "type": "integer"
          },
          "staticId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "attributs": {
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/EndPointAttributs"
                }
              ]
            }
          }
        }
      },
      "EndPointAttributs": {
        "type": "object",
        "properties": {
          "label": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "date": {
            "type": "integer"
          },
          "type": {
            "type": "string"
          },
          "unit": {
            "type": "integer"
          }
        }
      },
      "CurrentValue": {
        "type": "object",
        "properties": {
          "currentValue": {
            "type": "integer"
          }
        }
      },
      "CurrentValueWithId": {
        "type": "object",
        "properties": {
          "dynamicId": {
            "type": "integer"
          },
          "currentValue": {
            "type": "integer"
          }
        }
      },
      "NewValue": {
        "type": "object",
        "properties": {
          "currentValue": {
            "type": "integer"
          }
        }
      },
      "Timeserie": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "date": {
              "type": "integer"
            },
            "value": {
              "type": "integer"
            }
          }
        }
      },
      "TimeserieWithID": {
        "type": "object",
        "properties": {
          "dynamicId": {
            "type": "integer"
          },
          "timeseries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Timeserie"
            }
          }
        }
      },
      "IoTNetworkNodeTypeList": {
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      "Workflow": {
        "type": "object",
        "properties": {
          "dynamicId": {
            "type": "integer"
          },
          "staticId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "WorkflowTree": {
        "type": "object",
        "properties": {
          "dynamicId": {
            "type": "integer"
          },
          "staticId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "Workflow": {
            "type": "string"
          },
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorkflowTree"
            }
          }
        },
        "example": {
          "dynamicId": 377295296,
          "staticId": "SpinalContext-b61aca38-c262-56bd-9b3b-72fba07999a4-173a52a9bd8",
          "name": "Scenes",
          "type": "SpinalService",
          "context": "SpinalContext",
          "children": [
            {
              "dynamicId": 377301280,
              "staticId": "SpinalNode-c04c8302-ef21-7fa1-3435-8bf1ecd717b8-173a52a9bde",
              "name": "bim",
              "type": "scene",
              "children": []
            }
          ]
        }
      },
      "Step": {
        "type": "object",
        "properties": {
          "dynamicId": {
            "type": "integer"
          },
          "staticId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "color": {
            "type": "string"
          },
          "order": {
            "type": "integer"
          },
          "processId": {
            "type": "string"
          }
        }
      },
      "TicketDetails": {
        "type": "object",
        "properties": {
          "dynamicId": {
            "type": "number"
          },
          "staticId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "priority": {
            "type": "integer"
          },
          "creationDate": {
            "type": "integer"
          },
          "elementSelectedId": {
            "type": "integer"
          },
          "userName": {
            "type": "string"
          },
          "Step": {
            "type": "object",
            "properties": {
              "dynamicId": {
                "type": "number"
              },
              "staticId": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "color": {
                "type": "string"
              },
              "order": {
                "type": "string"
              }
            }
          },
          "workflowDynamicId": {
            "type": "integer"
          },
          "workflowName": {
            "type": "string"
          },
          "Annotation_list": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Note"
            }
          },
          "file_list": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/File"
            }
          },
          "log_list": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LogTicket"
            }
          }
        }
      },
      "Ticket": {
        "type": "object",
        "properties": {
          "dynamicId": {
            "type": "integer"
          },
          "staticId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "Process": {
        "type": "object",
        "properties": {
          "dynamicId": {
            "type": "integer"
          },
          "staticId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "LogTicket": {
        "type": "object",
        "properties": {
          "userName": {
            "type": "string"
          },
          "date": {
            "type": "number"
          },
          "event": {
            "type": "number"
          },
          "ticketStaticId": {
            "type": "string"
          }
        }
      },
      "WorkflowNodeTypeList": {
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      "ContextEvent": {
        "type": "object",
        "properties": {
          "dynamicId": {
            "type": "integer"
          },
          "staticId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "CategoryEvent": {
        "type": "object",
        "properties": {
          "dynamicId": {
            "type": "integer"
          },
          "staticId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "GroupEvent": {
        "type": "object",
        "properties": {
          "dynamicId": {
            "type": "integer"
          },
          "staticId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "Event": {
        "type": "object",
        "properties": {
          "dynamicId": {
            "type": "integer"
          },
          "staticId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "groupId": {
            "type": "string"
          },
          "categoryId": {
            "type": "string"
          },
          "nodeId": {
            "type": "string"
          },
          "repeat": {
            "type": "boolean"
          },
          "description": {
            "type": "string"
          },
          "startDate": {
            "type": "string"
          },
          "endDate": {
            "type": "string"
          },
          "creationDate": {
            "type": "string"
          },
          "user": {
            "type": "object"
          }
        }
      },
      "TypeListGroupContext": {
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      "IBimObjectsInfo": {
        "type": "object",
        "properties": {
          "model": {
            "$ref": "#/components/schemas/IModel"
          },
          "bimObjects": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IBimObjectsItem"
            }
          },
          "notFound": {
            "type": "array",
            "items": {
              "type": "number"
            }
          }
        }
      },
      "IModel": {
        "type": "object",
        "properties": {
          "dynamicId": {
            "type": "number"
          },
          "staticId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "required": [
          "dynamicId",
          "staticId",
          "name",
          "type"
        ]
      },
      "IBimObjectsItem": {
        "type": "object",
        "properties": {
          "dynamicId": {
            "type": "number"
          },
          "staticId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "children_relation_list": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IRelationListItem"
            }
          },
          "parent_relation_list": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IRelationListItem"
            }
          },
          "externalId": {
            "type": "string"
          },
          "dbid": {
            "type": "number"
          },
          "bimFileId": {
            "type": "string"
          },
          "version": {
            "type": "number"
          }
        },
        "required": [
          "dynamicId",
          "staticId",
          "name",
          "type",
          "children_relation_list",
          "parent_relation_list",
          "externalId",
          "dbid",
          "bimFileId",
          "version"
        ]
      },
      "IRelationListItem": {
        "type": "object",
        "properties": {
          "dynamicId": {
            "type": "number"
          },
          "staticId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "children_number": {
            "type": "number"
          }
        },
        "required": [
          "dynamicId",
          "staticId",
          "name",
          "children_number"
        ]
      },
      "ISceneListReturn": {
        "type": "object",
        "properties": {
          "scenes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IScenesItem"
            }
          }
        }
      },
      "IScenesItem": {
        "type": "object",
        "properties": {
          "dynamicId": {
            "type": "integer"
          },
          "staticId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "autoLoad": {
            "type": "boolean"
          },
          "useAllDT": {
            "type": "boolean"
          },
          "sceneAlignMethod": {
            "type": "number"
          }
        },
        "required": [
          "dynamicId",
          "staticId",
          "name",
          "description",
          "type"
        ]
      },
      "IOptionsItem": {
        "type": "object",
        "properties": {
          "urn": {
            "type": "string"
          },
          "dbIds": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "loadOption": {
            "$ref": "#/components/schemas/ILoadOption"
          }
        },
        "required": [
          "urn"
        ]
      },
      "ILoadOption": {
        "type": "object",
        "properties": {
          "globalOffset": {
            "$ref": "#/components/schemas/IGlobalOffset"
          }
        },
        "required": [
          "globalOffset"
        ]
      },
      "IGlobalOffset": {
        "type": "object",
        "properties": {
          "globalOffset": {
            "type": "object",
            "properties": {
              "x": {
                "type": "integer"
              },
              "y": {
                "type": "integer"
              },
              "z": {
                "type": "integer"
              }
            }
          }
        },
        "required": [
          "x",
          "y",
          "z"
        ]
      },
      "IScenesbody": {
        "type": "object",
        "properties": {
          "dynamicId": {
            "type": "integer"
          },
          "staticId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "autoLoad": {
            "type": "boolean"
          },
          "useAllDT": {
            "type": "boolean"
          },
          "sceneAlignMethod": {
            "type": "integer"
          },
          "scenesItems": {
            "$ref": "#/components/schemas/IOptionsItem"
          },
          "options": {
            "$ref": "#/components/schemas/IScenesItemsItem"
          }
        },
        "required": [
          "dynamicId",
          "staticId",
          "name",
          "description",
          "type",
          "scenesItems"
        ]
      },
      "IScenesItemsItem": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "dynamicId": {
            "type": "integer"
          },
          "staticId": {
            "type": "string"
          },
          "item": {
            "type": "string"
          },
          "aecPath": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "dynamicId",
          "staticId"
        ]
      },
      "File": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "fileId": {
            "type": "integer"
          }
        }
      },
      "Command": {
        "type": "object",
        "properties": {
          "dynamicId": {
            "type": "integer"
          },
          "staticId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "CurrentValue": {
            "type": "number"
          }
        }
      },
      "HealthStatus": {
        "type": "object",
        "properties": {
          "name": {
            "type": "integer"
          },
          "bootTimestamp": {
            "type": "string"
          },
          "lastHealthTime": {
            "type": "string"
          },
          "ramRssUsed": {
            "type": "string"
          },
          "logList": {
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        }
      },
      "ProfilesList": {
        "type": "object",
        "properties": {
          "dynamicId": {
            "type": "integer"
          },
          "staticId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "groupeProfile": {
            "type": "object",
            "properties": {
              "dynamicId": {
                "type": "integer"
              },
              "name": {
                "type": "string"
              }
            }
          },
          "categoryProfile": {
            "type": "object",
            "properties": {
              "dynamicId": {
                "type": "integer"
              },
              "name": {
                "type": "string"
              }
            }
          },
          "contextProfile": {
            "type": "object",
            "properties": {
              "dynamicId": {
                "type": "integer"
              },
              "name": {
                "type": "string"
              }
            }
          },
          "categories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Context"
            }
          }
        }
      },
      "CategoriesAttribute": {
        "type": "object",
        "properties": {
          "dynamicId": {
            "type": "integer"
          },
          "staticId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Pub/Sub",
      "description": "pubsub api documentation is available at <a>https://resourcecenter.fr.spinalcom.com/ressources-développeur/api-sdk-principes/api-pubsub</a>"
    }
  ],
  "paths": {
    "/api/v1/context/list": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Return list of contexts",
        "summary": "Gets a list of contexts",
        "tags": [
          "Contexts/ontologies"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Context"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/context/{id}/tree": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Return tree of context",
        "summary": "Get a tree context by ID",
        "tags": [
          "Contexts/ontologies"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContextTree"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/context/{id}/tree/{numberOfLevel}/depth": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Return tree of context",
        "summary": "Get a tree context by ID",
        "tags": [
          "Contexts/ontologies"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "numberOfLevel",
            "description": "the number of levels to go",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContextTree"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/context/{id}/nodeTypeList": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Return node type list of context",
        "summary": "Get type list in context with given ID context",
        "tags": [
          "Contexts/ontologies"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContextNodeTypeList"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/context/{idContext}/node/{idNode}/nodeTypeList": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Return node type list of context",
        "summary": "Get type list from node in context with given IDcontext ans IDnode",
        "tags": [
          "Contexts/ontologies"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "idContext",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "idNode",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContextNodeTypeList"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/context/{id}/nodesOfType/{type}": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Return nodes of type in context",
        "summary": "Gets a nodes of type with given ID context and Type",
        "tags": [
          "Contexts/ontologies"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "type",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContextNodeofTypes"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/context/{contextId}/node/{nodeId}/nodesOfType/{type}": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "return the nodes of type from a node in a context",
        "summary": "Get nodes of type from a node in a context with given IDcontext IDnode and type",
        "tags": [
          "Contexts/ontologies"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "contextId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "nodeId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "type",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContextNodeofTypes"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/context/{idContext}/node/{idNode}/tree": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Return tree of node in context",
        "summary": "Get a tree of node context with given IDcontext and IDnode",
        "tags": [
          "Contexts/ontologies"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "idContext",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "idNode",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContextTree"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/find_node_in_context": {
      "post": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Find node object in a specific context",
        "summary": "Gets Node",
        "tags": [
          "Contexts/ontologies"
        ],
        "requestBody": {
          "description": "(optionSearchNodes) this field takes a string that allows us to search either by dynamicId, the staticId or by name, (dynamicId), (staticId), (name) / (optionResult) this field takes a string that allows us to choose the type of result / either a standard result, or a detailed result by putting the type of the node.(standard) / (type of node (example = ticket)) (context) this field takes a string either the name of the context, the dynamicId or the staticId / (array) this field takes a list of strings according to your choice of fields (optionNodes from research)",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "optionSearchNodes",
                  "optionResult",
                  "context",
                  "array"
                ],
                "properties": {
                  "optionSearchNodes": {
                    "type": "string"
                  },
                  "optionResult": {
                    "type": "string"
                  },
                  "context": {
                    "type": "string"
                  },
                  "array": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Node"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/node/{id}/read": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Return node object with parent and children relation",
        "summary": "Gets Node",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Node"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/relation/{id}/children_node": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Return cildrens of relation node",
        "summary": "Get childrens of relation with given ID node",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Node"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/relation/{id}/parent_node": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Return parents of relation node",
        "summary": "Gets parents of relation with given ID node",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Node"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/node/{id}/endpoint_list": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Return list of endpoint",
        "summary": "Gets a list of endpoint",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EndPointNode"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/node/{id}/control_endpoint_list": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Return list of control endpoint",
        "summary": "Gets a list of control endpoint",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EndPointNode"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/node/{id}/event_list": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Returns events of node",
        "summary": "Get list events of node",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Event"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/node/{id}/file_list": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Returns files of node",
        "summary": "Get list files of node",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/File"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/node/{id}/note_list": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Returns notes of node",
        "summary": "Get list notes of node",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Note"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/node/{id}/ticket_list": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Returns list of tickets object",
        "summary": "Get list of tickets object",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Ticket"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/node/{id}/upload_file": {
      "post": {
        "security": [
          {
            "bearerAuth": [
              "read"
            ]
          }
        ],
        "description": "Upload a Doc",
        "summary": "Upload a Doc",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "file": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Upload Successfully"
          },
          "400": {
            "description": "Upload not Successfully"
          }
        }
      }
    },
    "/api/v1/node/{id}/download_file": {
      "post": {
        "security": [
          {
            "bearerAuth": [
              "read"
            ]
          }
        ],
        "description": "Download a document in either binary or Base64 encoding",
        "summary": "Download a document",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "encoding",
            "description": "Specify the encoding type for the downloaded file ('binary' or 'base64'). Default is 'binary'.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "binary",
                "base64"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "File downloaded successfully"
          },
          "400": {
            "description": "Error in downloading file"
          }
        }
      }
    },
    "/api/v1/node/{id}/categoriesList": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Returns list of categories atrribut",
        "summary": "Get list of categories atrribut",
        "tags": [
          "Node Attribut Categories"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CategoriesAttribute"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/node/{id}/category/create": {
      "post": {
        "security": [
          {
            "bearerAuth": [
              "read"
            ]
          }
        ],
        "description": "create category attribute in specific node",
        "summary": "create category attribut",
        "tags": [
          "Node Attribut Categories"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "categoryName"
                ],
                "properties": {
                  "categoryName": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Created successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/node/{nodeId}/category/{categoryId}/delete": {
      "delete": {
        "security": [
          {
            "bearerAuth": [
              "read"
            ]
          }
        ],
        "description": "Delete category from graph",
        "summary": "Delete category attribut",
        "tags": [
          "Node Attribut Categories"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "nodeId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "categoryId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/node/{nodeId}/categoryByName/{categoryName}/delete": {
      "delete": {
        "security": [
          {
            "bearerAuth": [
              "read"
            ]
          }
        ],
        "description": "Delete category from graph",
        "summary": "Delete category attribut",
        "tags": [
          "Node Attribut Categories"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "nodeId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "categoryName",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/node/{nodeId}/categoryById/{categoryId}/read": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "read category attribut in specific node",
        "summary": "read category attribut",
        "tags": [
          "Node Attribut Categories"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "nodeId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "categoryId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoriesAttribute"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/node/{nodeId}/categoryByName/{categoryName}/read": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "read category attribut in specific node",
        "summary": "read category attribut",
        "tags": [
          "Node Attribut Categories"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "nodeId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "categoryName",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoriesAttribute"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/node/{nodeId}/categoryById/{categoryId}/update": {
      "put": {
        "security": [
          {
            "bearerAuth": [
              "read"
            ]
          }
        ],
        "description": "update category attribut in specific node",
        "summary": "update category attribut",
        "tags": [
          "Node Attribut Categories"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "nodeId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "categoryId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "categoryName"
                ],
                "properties": {
                  "categoryName": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/node/{nodeId}/categoryByName/{categoryName}/update": {
      "put": {
        "security": [
          {
            "bearerAuth": [
              "read"
            ]
          }
        ],
        "description": "update category attribut in specific node",
        "summary": "update category attribut",
        "tags": [
          "Node Attribut Categories"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "nodeId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "categoryName",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "categoryName"
                ],
                "properties": {
                  "categoryName": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/node/{id}/attribute_list": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Returns list of attributs",
        "summary": "Get list of attributs",
        "tags": [
          "Node Attributs"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NodeAttribut"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/node/{idNode}/category/{idCategory}/attribut/create": {
      "post": {
        "security": [
          {
            "bearerAuth": [
              "read"
            ]
          }
        ],
        "description": "Create attribute",
        "summary": "create an attribute",
        "tags": [
          "Node Attributs"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "idNode",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "idCategory",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "attributeLabel",
                  "attributeValue",
                  "attributeType",
                  "attributeUnit"
                ],
                "properties": {
                  "attributeLabel": {
                    "type": "string"
                  },
                  "attributeValue": {
                    "type": "string"
                  },
                  "attributeType": {
                    "type": "string"
                  },
                  "attributeUnit": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Create Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/node/{idNode}/category/{idCategory}/attribut/{attributName}/update": {
      "put": {
        "security": [
          {
            "bearerAuth": [
              "read"
            ]
          }
        ],
        "description": "Create attribute",
        "summary": "create an attribute",
        "tags": [
          "Node Attributs"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "idNode",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "idCategory",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "attributName",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "attributeLabel",
                  "attributeValue",
                  "attributeType",
                  "attributeUnit"
                ],
                "properties": {
                  "attributeLabel": {
                    "type": "string"
                  },
                  "attributeValue": {
                    "type": "string"
                  },
                  "attributeType": {
                    "type": "string"
                  },
                  "attributeUnit": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Create Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/node/{idNode}/category/{idCategory}/attribut/{attributName}/delete": {
      "delete": {
        "security": [
          {
            "bearerAuth": [
              "read"
            ]
          }
        ],
        "description": "Create attribute",
        "summary": "create an attribute",
        "tags": [
          "Node Attributs"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "idNode",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "idCategory",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "attributName",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Create Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/building/read": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "read building",
        "summary": "Gets building",
        "tags": [
          "Geographic Context"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Building"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/geographicContext/tree": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Return the geographic context",
        "summary": "Get the geographic context",
        "tags": [
          "Geographic Context"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContextTree"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/geographicContext/space": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Return space tree of context",
        "summary": "Get a space tree context",
        "tags": [
          "Geographic Context"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContextTree"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/floor/list": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Return list of floor",
        "summary": "Gets a list of floor",
        "tags": [
          "Geographic Context"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Floor"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/floor/{id}/floor_details": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Return details of a floor",
        "summary": "Gets a details of a floor",
        "tags": [
          "Geographic Context"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FloorDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/floor/{id}/reference_Objects_list": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Return reference objects of a floor",
        "summary": "Gets a reference objects of a floor",
        "tags": [
          "Geographic Context"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "dynamicId": {
                      "type": "integer"
                    },
                    "staticId": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "bimFileId": {
                      "type": "string"
                    },
                    "infoReferencesObjects": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Equipement"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/floor/{id}/room_list": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Return list of room",
        "summary": "Gets a list of room",
        "tags": [
          "Geographic Context"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Room"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/room/{id}/read": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "read room",
        "summary": "Gets room",
        "tags": [
          "Geographic Context"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Room"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/room/{id}/read_details": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "read details of room",
        "summary": "Gets details of room",
        "tags": [
          "Geographic Context"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoomDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/room/{id}/endpoint_list": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Return list of endpoint",
        "summary": "Gets a list of endpoint",
        "tags": [
          "Geographic Context"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EndPointRoom"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/room/{id}/control_endpoint_list": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Return list of control endpoint",
        "summary": "Gets a list of control endpoint",
        "tags": [
          "Geographic Context"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EndPointRoom"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/room/{id}/equipment_list": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Return list of equipement",
        "summary": "Gets a list of equipement",
        "tags": [
          "Geographic Context"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Equipement"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/room/{id}/reference_object_list": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Return reference objects of a room",
        "summary": "Gets a reference objects of a room",
        "tags": [
          "Geographic Context"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "dynamicId": {
                      "type": "integer"
                    },
                    "staticId": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "bimFileId": {
                      "type": "string"
                    },
                    "infoReferencesObjects": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Equipement"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/room/{id}/notes": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Returns notes of room",
        "summary": "Get list notes of room",
        "tags": [
          "Geographic Context"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Note"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/room/{id}/ticket_list": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Returns list of tickets of room",
        "summary": "Get list of tickets of room",
        "tags": [
          "Geographic Context"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Ticket"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/room/{id}/event_list": {
      "post": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Returns events of room",
        "summary": "Get list events of room",
        "tags": [
          "Geographic Context"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "you have 3 choices to fill in the \"period\" field   (*all* => to retrieve the entire list of events,   *today* => to retrieve today's events,   *week* = > to retrieve the events of the current week,   *dateInterval* or *undefined* to retrieve a precise date by filling in the \"startDate\" and \"endDate\" fields)",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "period"
                ],
                "properties": {
                  "startDate": {
                    "type": "string"
                  },
                  "endDate": {
                    "type": "string"
                  },
                  "period": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Event"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/room/{id}/file_list": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Returns files of room",
        "summary": "Get list files of room",
        "tags": [
          "Geographic Context"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/File"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/equipement/{id}/read": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "read equipement",
        "summary": "Gets equipement",
        "tags": [
          "Geographic Context"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Equipement"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/equipement/{id}/endpoint_list": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Return list of endpoint",
        "summary": "Gets a list of endpoint",
        "tags": [
          "Geographic Context"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EndPointRoom"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/equipement/{id}/control_endpoint_list": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Return list of control endpoint",
        "summary": "Gets a list of control endpoint",
        "tags": [
          "Geographic Context"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EndPointRoom"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/equipement/{id}/note_list": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Returns notes of equipement",
        "summary": "Get list notes of equipement",
        "tags": [
          "Geographic Context"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Note"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/equipement/{id}/ticket_list": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Returns list of tickets of equipement",
        "summary": "Get list of tickets of equipement",
        "tags": [
          "Geographic Context"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Ticket"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/equipement/{id}/event_list": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Returns events of equipement",
        "summary": "Get list events of equipement",
        "tags": [
          "Geographic Context"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Event"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/equipement/{id}/file_list": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Returns files of equipement",
        "summary": "Get list files of equipement",
        "tags": [
          "Geographic Context"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/File"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/IoTNetworkContext/list": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Return list of IoTNetwork",
        "summary": "Gets a list of IoTNetwork",
        "tags": [
          "IoTNetwork & Time Series"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IoTNetwork"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/IoTNetworkContext/{id}/tree": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Return tree of IoTNetwork",
        "summary": "Get a tree IoTNetwork by ID",
        "tags": [
          "IoTNetwork & Time Series"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IoTNetworkTree"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/IoTNetworkContext/{id}/nodeTypeList": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Return node type list of IoTNetwork",
        "summary": "Get type list in IoTNetwork with given ID",
        "tags": [
          "IoTNetwork & Time Series"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IoTNetworkNodeTypeList"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/IoTNetworkContext/create": {
      "post": {
        "security": [
          {
            "bearerAuth": [
              "read"
            ]
          }
        ],
        "description": "create network context",
        "summary": "create network context",
        "tags": [
          "IoTNetwork & Time Series"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "configNetworkContext"
                ],
                "properties": {
                  "contextName": {
                    "type": "string"
                  },
                  "networkName": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Create Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/IoTNetworkContext/{id}/update": {
      "put": {
        "security": [
          {
            "bearerAuth": [
              "read"
            ]
          }
        ],
        "description": "update the IoTNetwork",
        "summary": "update the IoTNetwork",
        "tags": [
          "IoTNetwork & Time Series"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "newNameIoTNetwork"
                ],
                "properties": {
                  "newNameIoTNetwork": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update Success"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/IoTNetworkContext/{id}/delete": {
      "delete": {
        "security": [
          {
            "bearerAuth": [
              "read"
            ]
          }
        ],
        "description": "delete network context",
        "summary": "delete network context",
        "tags": [
          "IoTNetwork & Time Series"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/IoTNetworkContext/{IoTNetworkId}/node/{nodeId}/find": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "find a node in IoTNetwork",
        "summary": "find a node in IoTNetwork",
        "tags": [
          "IoTNetwork & Time Series"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "IoTNetworkId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "nodeId",
            "description": "use the staticId ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IoTNetwork"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/IoTNetworkContext/{IoTNetworkId}/node/{nodeId}/read": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "read a node in IoTNetwork",
        "summary": "read a node in IoTNetwork",
        "tags": [
          "IoTNetwork & Time Series"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "IoTNetworkId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "nodeId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IoTNetwork"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/Network/list": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Return list of Network",
        "summary": "Gets a list of Network",
        "tags": [
          "IoTNetwork & Time Series"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IoTNetwork"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/Network/create": {
      "post": {
        "security": [
          {
            "bearerAuth": [
              "read"
            ]
          }
        ],
        "description": "create Network",
        "summary": "create Network",
        "tags": [
          "IoTNetwork & Time Series"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "IoTNetworkContext_DynamicId",
                  "NetworkName",
                  "NetworkTypeName"
                ],
                "properties": {
                  "IoTNetworkContext_DynamicId": {
                    "type": "string"
                  },
                  "NetworkName": {
                    "type": "string"
                  },
                  "NetworkTypeName": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Create Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/Network/{id}/delete": {
      "delete": {
        "security": [
          {
            "bearerAuth": [
              "read"
            ]
          }
        ],
        "description": "delete network",
        "summary": "delete network",
        "tags": [
          "IoTNetwork & Time Series"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/Network/{id}/update": {
      "put": {
        "security": [
          {
            "bearerAuth": [
              "read"
            ]
          }
        ],
        "description": "update the Network",
        "summary": "update the Network",
        "tags": [
          "IoTNetwork & Time Series"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "newNameNetwork"
                ],
                "properties": {
                  "newNameNetwork": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update Success"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/Network/{id}/device_list": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Return list of device",
        "summary": "Gets a list of device",
        "tags": [
          "IoTNetwork & Time Series"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IoTNetwork"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/device/create": {
      "post": {
        "security": [
          {
            "bearerAuth": [
              "read"
            ]
          }
        ],
        "description": "create device",
        "summary": "create device",
        "tags": [
          "IoTNetwork & Time Series"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "configDevice"
                ],
                "properties": {
                  "networkDynamicId": {
                    "type": "number",
                    "description": "optional"
                  },
                  "name": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Create Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/device/{id}/delete": {
      "delete": {
        "security": [
          {
            "bearerAuth": [
              "read"
            ]
          }
        ],
        "description": "delete device",
        "summary": "delete device",
        "tags": [
          "IoTNetwork & Time Series"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/device/{id}/update": {
      "put": {
        "security": [
          {
            "bearerAuth": [
              "read"
            ]
          }
        ],
        "description": "update the device",
        "summary": "update the device",
        "tags": [
          "IoTNetwork & Time Series"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "newNameNetwork"
                ],
                "properties": {
                  "newNameNetwork": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update Success"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/device/{id}/endpoint_list": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Return list of endpoint",
        "summary": "Gets a list of endpoint",
        "tags": [
          "IoTNetwork & Time Series"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IoTNetwork"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/endpoint/create": {
      "post": {
        "security": [
          {
            "bearerAuth": [
              "read"
            ]
          }
        ],
        "description": "create endpoint",
        "summary": "create endpoint",
        "tags": [
          "IoTNetwork & Time Series"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "deviceDynamicId",
                  "name",
                  "type",
                  "Unit"
                ],
                "properties": {
                  "deviceDynamicId": {
                    "type": "number"
                  },
                  "name": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  },
                  "Unit": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Create Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/endpoint/{id}/delete": {
      "delete": {
        "security": [
          {
            "bearerAuth": [
              "read"
            ]
          }
        ],
        "description": "delete endpoint",
        "summary": "delete endpoint",
        "tags": [
          "IoTNetwork & Time Series"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/endpoint/{id}/attributsList": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Returns list of attributs of endpoint",
        "summary": "Get list of attributs of endpoint",
        "tags": [
          "IoTNetwork & Time Series"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EndPointNodeAttribut"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/endpoint/{id}/read": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "read the current value of endpoint",
        "summary": "read the current value of endpoint",
        "tags": [
          "IoTNetwork & Time Series"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CurrentValue"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/endpoint/{id}/update": {
      "put": {
        "security": [
          {
            "bearerAuth": [
              "read"
            ]
          }
        ],
        "description": "update the current value of endpoint",
        "summary": "update the current value of endpoint",
        "tags": [
          "IoTNetwork & Time Series"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "newValue"
                ],
                "properties": {
                  "newValue": {
                    "type": "number"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NewValue"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/endpoint/{id}/timeSeries/insert": {
      "post": {
        "security": [
          {
            "bearerAuth": [
              "read"
            ]
          }
        ],
        "description": "insert new value",
        "summary": "insert new value",
        "tags": [
          "IoTNetwork & Time Series"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "the date format is \"DD-MM-YYYY HH:mm:ss\" or \"DD MM YYYY HH:mm:ss\" or \"DD/MM/YYYY HH:mm:ss\"",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "newValue",
                  "date"
                ],
                "properties": {
                  "newValue": {
                    "type": "number"
                  },
                  "date": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Create Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/endpoint/{id}/timeSeries/push": {
      "post": {
        "security": [
          {
            "bearerAuth": [
              "read"
            ]
          }
        ],
        "description": "push new value",
        "summary": "push new value",
        "tags": [
          "IoTNetwork & Time Series"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "newValue"
                ],
                "properties": {
                  "newValue": {
                    "type": "number"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Create Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/endpoint/{id}/timeSeries/read/{begin}/{end}": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "get time series",
        "summary": "get time series",
        "tags": [
          "IoTNetwork & Time Series"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "begin",
            "description": "Date Format is DD-MM-YYYY HH:mm:ss or DD MM YYYY HH:mm:ss",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "end",
            "description": "Date Format is DD-MM-YYYY hh:mm:ss or DD MM YYYY HH:mm:ss",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Timeserie"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/endpoint/{id}/timeSeries/readCurrentDay": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "get time series of current day",
        "summary": "get time series of current day",
        "tags": [
          "IoTNetwork & Time Series"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Timeserie"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/endpoint/{id}/timeSeries/readCurrentMonth": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "get time series of month",
        "summary": "get time series of month",
        "tags": [
          "IoTNetwork & Time Series"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Timeserie"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/endpoint/{id}/timeSeries/readCurrentWeek": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "get time series of week",
        "summary": "get time series of week",
        "tags": [
          "IoTNetwork & Time Series"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Timeserie"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/endpoint/{id}/timeSeries/readCurrentYear": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "get time series of current year",
        "summary": "get time series of current year",
        "tags": [
          "IoTNetwork & Time Series"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Timeserie"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/endpoint/{id}/timeSeries/readFromLast24H": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "get time series",
        "summary": "get time series",
        "tags": [
          "IoTNetwork & Time Series"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Timeserie"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/workflow/list": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Return list of workflows",
        "summary": "Gets a list of workflows",
        "tags": [
          "Workflow & ticket"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Workflow"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/workflow/{id}/tree": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Return tree of workflow",
        "summary": "Get a tree workflow by ID",
        "tags": [
          "Workflow & ticket"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContextTree"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/workflow/create": {
      "post": {
        "security": [
          {
            "bearerAuth": [
              "read"
            ]
          }
        ],
        "description": "create a workflow",
        "summary": "create a workflow",
        "tags": [
          "Workflow & ticket"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "nameWorkflow"
                ],
                "properties": {
                  "nameWorkflow": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Create Successfully"
          },
          "400": {
            "description": "create not Successfully"
          }
        }
      }
    },
    "/api/v1/workflow/{id}/read": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "read a workflow",
        "summary": "read a workflow",
        "tags": [
          "Workflow & ticket"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Workflow"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/workflow/{id}/update": {
      "put": {
        "security": [
          {
            "bearerAuth": [
              "read"
            ]
          }
        ],
        "description": "update the workflow",
        "summary": "update the workflow",
        "tags": [
          "Workflow & ticket"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "newNameWorkflow"
                ],
                "properties": {
                  "newNameWorkflow": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/workflow/{id}/delete": {
      "delete": {
        "security": [
          {
            "bearerAuth": [
              "read"
            ]
          }
        ],
        "description": "Delete a workflow",
        "summary": "delete an workflow",
        "tags": [
          "Workflow & ticket"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/workflow/{id}/nodeTypeList": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Return node type list of workflow",
        "summary": "Get type list in workflow with given ID",
        "tags": [
          "Workflow & ticket"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowNodeTypeList"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/workflow/{workflowId}/node/{nodeId}/find": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "find a node in workflow",
        "summary": "find a node in workflow",
        "tags": [
          "Workflow & ticket"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "workflowId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "nodeId",
            "description": "use the Static ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Workflow"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/workflow/{workflowId}/node/{nodeId}/read": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "read a node in workflow",
        "summary": "read a node in workflow",
        "tags": [
          "Workflow & ticket"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "workflowId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "nodeId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Workflow"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/workflow/{id}/processList": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Returns list of process",
        "summary": "Get list of process",
        "tags": [
          "Workflow & ticket"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Process"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/workflow/{id}/create_process": {
      "post": {
        "security": [
          {
            "bearerAuth": [
              "read"
            ]
          }
        ],
        "description": "create a Process",
        "summary": "create a Process",
        "tags": [
          "Workflow & ticket"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "nameProcess"
                ],
                "properties": {
                  "nameProcess": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Create Successfully"
          },
          "400": {
            "description": "create not Successfully"
          }
        }
      }
    },
    "/api/v1/workflow/{workflowId}/process/{processId}/delete_process": {
      "delete": {
        "security": [
          {
            "bearerAuth": [
              "read"
            ]
          }
        ],
        "description": "Delete a process",
        "summary": "delete an process",
        "tags": [
          "Workflow & ticket"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "workflowId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "processId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/workflow/{workflowId}/process/{processId}/update": {
      "put": {
        "security": [
          {
            "bearerAuth": [
              "read"
            ]
          }
        ],
        "description": "update the process",
        "summary": "update the process",
        "tags": [
          "Workflow & ticket"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "workflowId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "processId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "newNameProcess"
                ],
                "properties": {
                  "newNameProcess": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/workflow/{workflowId}/process/{processId}/stepList": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Returns list of steps",
        "summary": "Get list of steps",
        "tags": [
          "Workflow & ticket"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "workflowId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "processId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Step"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/workflow/{id}/create_step": {
      "post": {
        "security": [
          {
            "bearerAuth": [
              "read"
            ]
          }
        ],
        "description": "add a Step",
        "summary": "add a Step",
        "tags": [
          "Workflow & ticket"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "processDynamicId",
                  "name",
                  "color",
                  "order"
                ],
                "properties": {
                  "processDynamicId": {
                    "type": "number"
                  },
                  "name": {
                    "type": "string"
                  },
                  "color": {
                    "type": "string"
                  },
                  "order": {
                    "type": "number"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Add Successfully"
          },
          "400": {
            "description": "Add not Successfully"
          }
        }
      }
    },
    "/api/v1/workflow/{workflowId}/process/{processId}/step/{stepId}/delete_step": {
      "delete": {
        "security": [
          {
            "bearerAuth": [
              "read"
            ]
          }
        ],
        "description": "Delete a step",
        "summary": "delete an step",
        "tags": [
          "Workflow & ticket"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "workflowId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "processId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "stepId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/workflow/{workflowId}/process/{processId}/step/{stepId}/update_step": {
      "put": {
        "security": [
          {
            "bearerAuth": [
              "read"
            ]
          }
        ],
        "description": "update the step",
        "summary": "update the step",
        "tags": [
          "Workflow & ticket"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "workflowId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "processId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "stepId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "newNameStep",
                  "newColor"
                ],
                "properties": {
                  "newNameStep": {
                    "type": "string"
                  },
                  "newColor": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/ticket/create_ticket": {
      "post": {
        "security": [
          {
            "bearerAuth": [
              "read"
            ]
          }
        ],
        "description": "add a Ticket",
        "summary": "add a Ticket",
        "tags": [
          "Workflow & ticket"
        ],
        "requestBody": {
          "description": "For the two parameters *workflow* and *process* you can browse it either by putting the dynamicId or the name and to associate the ticket with an element, please fill in the dynamicId or StaticId parameter",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "workflow",
                  "process",
                  "nodeDynamicId",
                  "nodeStaticId",
                  "name",
                  "priority",
                  "description",
                  "declarer_id",
                  "imageString"
                ],
                "properties": {
                  "workflow": {
                    "type": "string"
                  },
                  "process": {
                    "type": "string"
                  },
                  "nodeDynamicId": {
                    "type": "number"
                  },
                  "nodeStaticId": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "priority": {
                    "type": "number"
                  },
                  "description": {
                    "type": "string"
                  },
                  "declarer_id": {
                    "type": "string"
                  },
                  "images": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string"
                        },
                        "value": {
                          "type": "string"
                        },
                        "comments": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Ticket"
                }
              }
            }
          },
          "400": {
            "description": "Add not Successfully"
          }
        }
      }
    },
    "/api/v1/ticket/{ticketId}/read_details": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Return ticket",
        "summary": "Get ticket",
        "tags": [
          "Workflow & ticket"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ticketId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/ticket/{ticketId}/add_doc": {
      "post": {
        "security": [
          {
            "bearerAuth": [
              "read"
            ]
          }
        ],
        "description": "Uploads a Doc",
        "summary": "Uploads a Doc",
        "tags": [
          "Workflow & ticket"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ticketId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "file": {
                  "style": "form"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "workflowId"
                ],
                "properties": {
                  "workflowId": {
                    "type": "number"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Add Successfully"
          },
          "400": {
            "description": "Add not Successfully"
          }
        }
      }
    },
    "/api/v1/ticket/{ticketId}/add_note": {
      "post": {
        "security": [
          {
            "bearerAuth": [
              "read"
            ]
          }
        ],
        "description": "add a note",
        "summary": "add a note",
        "tags": [
          "Workflow & ticket"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ticketId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "note"
                ],
                "properties": {
                  "note": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Add Successfully"
          },
          "400": {
            "description": "Add not Successfully"
          }
        }
      }
    },
    "/api/v1/ticket/{ticketId}/change_node": {
      "put": {
        "security": [
          {
            "bearerAuth": [
              "read"
            ]
          }
        ],
        "description": "change a node of Ticket",
        "summary": "change a node of Ticket",
        "tags": [
          "Workflow & ticket"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ticketId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "nodeDynamicId"
                ],
                "properties": {
                  "nodeDynamicId": {
                    "type": "number"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "change node Successfully"
          },
          "400": {
            "description": "change node not Successfully"
          }
        }
      }
    },
    "/api/v1/ticket/{ticketId}/change_process": {
      "put": {
        "security": [
          {
            "bearerAuth": [
              "read"
            ]
          }
        ],
        "description": "change a process of Ticket",
        "summary": "change a process of Ticket",
        "tags": [
          "Workflow & ticket"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ticketId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "processDynamicId"
                ],
                "properties": {
                  "processDynamicId": {
                    "type": "number"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "change process Successfully"
          },
          "400": {
            "description": "change process not Successfully"
          }
        }
      }
    },
    "/api/v1/ticket/{ticketId}/change_workflow": {
      "put": {
        "security": [
          {
            "bearerAuth": [
              "read"
            ]
          }
        ],
        "description": "change a wokflow of Ticket",
        "summary": "change a wokflow of Ticket",
        "tags": [
          "Workflow & ticket"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ticketId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "workflowDynamicId",
                  "processDynamicId"
                ],
                "properties": {
                  "workflowDynamicId": {
                    "type": "number"
                  },
                  "processDynamicId": {
                    "type": "number"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "change workflow Successfully"
          },
          "400": {
            "description": "change workflow not Successfully"
          }
        }
      }
    },
    "/api/v1/ticket/{ticketId}/find_entity": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Return entity of ticket",
        "summary": "Get entity of ticket",
        "tags": [
          "Workflow & ticket"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ticketId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BasicNode"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/ticket/{ticketId}/next_step": {
      "post": {
        "security": [
          {
            "bearerAuth": [
              "read"
            ]
          }
        ],
        "description": "move a Ticket",
        "summary": "move a Ticket",
        "tags": [
          "Workflow & ticket"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ticketId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "workflowDynamicId",
                  "processDynamicId"
                ],
                "properties": {
                  "workflowDynamicId": {
                    "type": "number"
                  },
                  "processDynamicId": {
                    "type": "number"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "move to next step Successfully"
          },
          "400": {
            "description": "move to next step not Successfully"
          }
        }
      }
    },
    "/api/v1/ticket/{ticketId}/previous_step": {
      "post": {
        "security": [
          {
            "bearerAuth": [
              "read"
            ]
          }
        ],
        "description": "move a Ticket",
        "summary": "move a Ticket",
        "tags": [
          "Workflow & ticket"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ticketId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "workflowDynamicId",
                  "processDynamicId"
                ],
                "properties": {
                  "workflowDynamicId": {
                    "type": "number"
                  },
                  "processDynamicId": {
                    "type": "number"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "move to previous step Successfully"
          },
          "400": {
            "description": "move to previous step not Successfully"
          }
        }
      }
    },
    "/api/v1/ticket/{ticketId}/archive": {
      "post": {
        "security": [
          {
            "bearerAuth": [
              "read"
            ]
          }
        ],
        "description": "archive a Ticket",
        "summary": "archive a Ticket",
        "tags": [
          "Workflow & ticket"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ticketId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "workflowDynamicId",
                  "processDynamicId"
                ],
                "properties": {
                  "workflowDynamicId": {
                    "type": "number"
                  },
                  "processDynamicId": {
                    "type": "number"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Archive Successfully"
          },
          "400": {
            "description": "Archive not Successfully"
          }
        }
      }
    },
    "/api/v1/ticket/{ticketId}/unarchive": {
      "post": {
        "security": [
          {
            "bearerAuth": [
              "read"
            ]
          }
        ],
        "description": "unarchive a Ticket",
        "summary": "unarchive a Ticket",
        "tags": [
          "Workflow & ticket"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ticketId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "workflowDynamicId",
                  "processDynamicId"
                ],
                "properties": {
                  "workflowDynamicId": {
                    "type": "number"
                  },
                  "processDynamicId": {
                    "type": "number"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Unarchive Successfully"
          },
          "400": {
            "description": "Unarchive not Successfully"
          }
        }
      }
    },
    "/api/v1/eventContext/list": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Return list of event contexts",
        "summary": "Gets a list of event contexts",
        "tags": [
          "Calendar & Event"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContextEvent"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/eventContext/{id}/tree": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Return tree of event context",
        "summary": "Get a tree event context by ID",
        "tags": [
          "Calendar & Event"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContextTree"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/eventContext/create": {
      "post": {
        "security": [
          {
            "bearerAuth": [
              "read"
            ]
          }
        ],
        "description": "create event context",
        "summary": "create event context",
        "tags": [
          "Calendar & Event"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "configEventContext"
                ],
                "properties": {
                  "contextName": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Context"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/eventContext/{id}/category_list": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Return list of event category",
        "summary": "Gets a list of event category",
        "tags": [
          "Calendar & Event"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CategoryEvent"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/eventContext/{id}/create_category": {
      "post": {
        "security": [
          {
            "bearerAuth": [
              "read"
            ]
          }
        ],
        "description": "create event category",
        "summary": "create event category",
        "tags": [
          "Calendar & Event"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "configEventCategory"
                ],
                "properties": {
                  "categoryName": {
                    "type": "string"
                  },
                  "icon": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Context"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/eventContext/{ContextId}/eventCategory/{CategoryId}/create_group": {
      "post": {
        "security": [
          {
            "bearerAuth": [
              "read"
            ]
          }
        ],
        "description": "create event group",
        "summary": "create event group",
        "tags": [
          "Calendar & Event"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ContextId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "CategoryId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "configEventGroup"
                ],
                "properties": {
                  "groupName": {
                    "type": "string"
                  },
                  "color": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Context"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/eventContext/{ContextId}/eventCategory/{CategoryId}/group_list": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Return list of event group",
        "summary": "Gets a list of event group",
        "tags": [
          "Calendar & Event"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ContextId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "CategoryId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GroupEvent"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/event/create": {
      "post": {
        "security": [
          {
            "bearerAuth": [
              "read"
            ]
          }
        ],
        "description": "create event, by using this api, please check the repeat attribute that it must be false, if you want to set it to true you must fill in the repeatend attribute, the startDate and endDate attributes must be in this format DD MM YYYY",
        "summary": "create event",
        "tags": [
          "Calendar & Event"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "contextId",
                  "categoryDynamicId",
                  "groupDynamicId",
                  "nodeDynamicId",
                  "startDate",
                  "endDate",
                  "description",
                  "repeat",
                  "repeatEnd",
                  "count",
                  "period"
                ],
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "contextId": {
                    "type": "number"
                  },
                  "categoryDynamicId": {
                    "type": "number"
                  },
                  "groupDynamicId": {
                    "type": "number"
                  },
                  "nodeDynamicId": {
                    "type": "number"
                  },
                  "startDate": {
                    "type": "string",
                    "default": "DD MM YYYY HH:mm:ss"
                  },
                  "endDate": {
                    "type": "string",
                    "default": "DD MM YYYY HH:mm:ss"
                  },
                  "description": {
                    "type": "string"
                  },
                  "repeat": {
                    "type": "boolean"
                  },
                  "repeatEnd": {
                    "type": "number",
                    "default": "DD MM YYYY HH:mm:ss"
                  },
                  "count": {
                    "type": "number"
                  },
                  "period": {
                    "type": "number",
                    "default": "day|week|month|year"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/event/{eventId}/read": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Return event",
        "summary": "Get event",
        "tags": [
          "Calendar & Event"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Event"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/event/{eventId}/update": {
      "put": {
        "security": [
          {
            "bearerAuth": [
              "read"
            ]
          }
        ],
        "description": "update event",
        "summary": "update event",
        "tags": [
          "Calendar & Event"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "contextId",
                  "name",
                  "repeat",
                  "startDate",
                  "endDate"
                ],
                "properties": {
                  "contextId": {
                    "type": "integer"
                  },
                  "name": {
                    "type": "string"
                  },
                  "startDate": {
                    "type": "string",
                    "default": "DD MM YYYY HH:mm:ss"
                  },
                  "endDate": {
                    "type": "string",
                    "default": "DD MM YYYY HH:mm:ss"
                  },
                  "repeat": {
                    "type": "boolean"
                  },
                  "count": {
                    "type": "number"
                  },
                  "period": {
                    "type": "number",
                    "default": "day|week|month|year"
                  },
                  "repeatEnd": {
                    "type": "number",
                    "default": "DD MM YYYY HH:mm:ss"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/event/{eventId}/delete": {
      "delete": {
        "security": [
          {
            "bearerAuth": [
              "read"
            ]
          }
        ],
        "description": "delete event",
        "summary": "delete event",
        "tags": [
          "Calendar & Event"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/groupContext/list": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Return list of contexts",
        "summary": "Gets a list of contexts",
        "tags": [
          "Group Context"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Context"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/groupContext/{id}/tree": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Return tree of context",
        "summary": "Get a tree context by ID",
        "tags": [
          "Group Context"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContextTree"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/groupContext/type_list": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Return list of type of groupContext",
        "summary": "Gets a list of type of groupContext",
        "tags": [
          "Group Context"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TypeListGroupContext"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/groupContext/contextsOfType/{type}": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Return nodes of type in context",
        "summary": "Gets a nodes of type with given ID context and Type",
        "tags": [
          "Group Context"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "type",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContextNodeofTypes"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/groupContext/create": {
      "post": {
        "security": [
          {
            "bearerAuth": [
              "read"
            ]
          }
        ],
        "description": "create group context",
        "summary": "create group context",
        "tags": [
          "Group Context"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "contextName",
                  "childrenType"
                ],
                "properties": {
                  "contextName": {
                    "type": "string"
                  },
                  "childrenType": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Create Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/groupContext/{id}/read": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "read group Context",
        "summary": "Gets group Context",
        "tags": [
          "Group Context"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Context"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/groupContext/{id}/update": {
      "put": {
        "security": [
          {
            "bearerAuth": [
              "read"
            ]
          }
        ],
        "description": "update group context",
        "summary": "update group context",
        "tags": [
          "Group Context"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "newContextName"
                ],
                "properties": {
                  "newContextName": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/groupContext/{id}/delete": {
      "delete": {
        "security": [
          {
            "bearerAuth": [
              "read"
            ]
          }
        ],
        "description": "delete groupContext",
        "summary": "delete groupContext",
        "tags": [
          "Group Context"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/groupeContext/{id}/category_list": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Return list of category",
        "summary": "Gets a list of category",
        "tags": [
          "Group Context"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CategoryEvent"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/groupContext/{id}/create_category": {
      "post": {
        "security": [
          {
            "bearerAuth": [
              "read"
            ]
          }
        ],
        "description": "create category",
        "summary": "create category",
        "tags": [
          "Group Context"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "categoryName",
                  "iconName"
                ],
                "properties": {
                  "categoryName": {
                    "type": "string"
                  },
                  "iconName": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Create Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/groupContext/{contextId}/category/{categoryId}/read": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "read category",
        "summary": "Get category",
        "tags": [
          "Group Context"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "contextId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "categoryId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BasicNode"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/groupContext/{contextId}/category/{categoryId}/update": {
      "put": {
        "security": [
          {
            "bearerAuth": [
              "read"
            ]
          }
        ],
        "description": "update category",
        "summary": "update category",
        "tags": [
          "Group Context"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "contextId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "categoryId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "newNameCategory",
                  "newNameIcon"
                ],
                "properties": {
                  "newNameCategory": {
                    "type": "string"
                  },
                  "newNameIcon": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/groupContext/{contextId}/category/{categoryId}/delete": {
      "delete": {
        "security": [
          {
            "bearerAuth": [
              "read"
            ]
          }
        ],
        "description": "delete category",
        "summary": "delete category",
        "tags": [
          "Group Context"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "contextId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "categoryId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/groupeContext/{contextId}/category/{categoryId}/group_list": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Return list of group",
        "summary": "Gets a list of group",
        "tags": [
          "Group Context"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "contextId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "categoryId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CategoryEvent"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/groupeContext/{contextId}/category/{categoryId}/create_group": {
      "post": {
        "security": [
          {
            "bearerAuth": [
              "read"
            ]
          }
        ],
        "description": "create group",
        "summary": "create group",
        "tags": [
          "Group Context"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "contextId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "categoryId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "groupName",
                  "colorName"
                ],
                "properties": {
                  "groupName": {
                    "type": "string"
                  },
                  "colorName": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Create Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/groupContext/{contextId}/category/{categoryId}/group/{groupId}/read": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "read group",
        "summary": "Get group",
        "tags": [
          "Group Context"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "contextId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "categoryId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "groupId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BasicNode"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/groupContext/{contextId}/category/{categoryId}/group/{groupId}/update": {
      "put": {
        "security": [
          {
            "bearerAuth": [
              "read"
            ]
          }
        ],
        "description": "update group",
        "summary": "update group",
        "tags": [
          "Group Context"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "contextId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "categoryId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "groupId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "newNameGroup",
                  "newNameColor"
                ],
                "properties": {
                  "newNameGroup": {
                    "type": "string"
                  },
                  "newNameColor": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/groupContext/{contextId}/category/{categoryId}/group/{groupId}/delete": {
      "delete": {
        "security": [
          {
            "bearerAuth": [
              "read"
            ]
          }
        ],
        "description": "delete group",
        "summary": "delete group",
        "tags": [
          "Group Context"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "contextId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "categoryId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "groupId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/roomsGroup/list": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Return list of contexts rooms group",
        "summary": "Gets a list of contexts rooms group",
        "tags": [
          "Rooms Group"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Context"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/roomsGroup/{id}/tree": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Return tree of context roomsGroup",
        "summary": "Get a tree context by ID",
        "tags": [
          "Rooms Group"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContextTree"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/roomsGroup/create": {
      "post": {
        "security": [
          {
            "bearerAuth": [
              "read"
            ]
          }
        ],
        "description": "create Rooms Group context",
        "summary": "create Rooms Group context",
        "tags": [
          "Rooms Group"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "contextName"
                ],
                "properties": {
                  "contextName": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Create Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/roomsGroup/{id}/read": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "read group Context roomsGroup",
        "summary": "Gets group Context roomsGroup",
        "tags": [
          "Rooms Group"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BasicNode"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/roomsGroup/{id}/update": {
      "put": {
        "security": [
          {
            "bearerAuth": [
              "read"
            ]
          }
        ],
        "description": "update group context roomsGroup",
        "summary": "update group context roomsGroup",
        "tags": [
          "Rooms Group"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "newGroupRoomContextName"
                ],
                "properties": {
                  "newGroupRoomContextName": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/roomsGroup/{id}/delete": {
      "delete": {
        "security": [
          {
            "bearerAuth": [
              "read"
            ]
          }
        ],
        "description": "delete roomsGroup context",
        "summary": "delete roomsGroup context",
        "tags": [
          "Rooms Group"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/roomsGroup/{id}/category_list": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Return list of category roomsGroup",
        "summary": "Gets a list of category roomsGroup",
        "tags": [
          "Rooms Group"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CategoryEvent"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/roomsGroup/{id}/create_category": {
      "post": {
        "security": [
          {
            "bearerAuth": [
              "read"
            ]
          }
        ],
        "description": "create category Room group",
        "summary": "create category Room group",
        "tags": [
          "Rooms Group"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "categoryName",
                  "iconName"
                ],
                "properties": {
                  "categoryName": {
                    "type": "string"
                  },
                  "iconName": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Create Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/roomsGroup/{contextId}/category/{categoryId}/read": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "read category roomsGroup",
        "summary": "Get category roomsGroup",
        "tags": [
          "Rooms Group"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "contextId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "categoryId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BasicNode"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/roomsGroup/{contextId}/category/{categoryId}/update": {
      "put": {
        "security": [
          {
            "bearerAuth": [
              "read"
            ]
          }
        ],
        "description": "update category roomsGroup",
        "summary": "update category roomsGroup",
        "tags": [
          "Rooms Group"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "contextId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "categoryId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "newNameCategory",
                  "newNameIcon"
                ],
                "properties": {
                  "newNameCategory": {
                    "type": "string"
                  },
                  "newNameIcon": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/roomsGroup/{contextId}/category/{categoryId}/delete": {
      "delete": {
        "security": [
          {
            "bearerAuth": [
              "read"
            ]
          }
        ],
        "description": "delete category",
        "summary": "delete category",
        "tags": [
          "Rooms Group"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "contextId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "categoryId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/roomsGroup/{contextId}/category/{categoryId}/group_list": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Return list of group roomsGroup",
        "summary": "Gets a list of group roomsGroup",
        "tags": [
          "Rooms Group"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "contextId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "categoryId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CategoryEvent"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/roomsGroup/{contextId}/category/{categoryId}/create_group": {
      "post": {
        "security": [
          {
            "bearerAuth": [
              "read"
            ]
          }
        ],
        "description": "create group roomsGroup",
        "summary": "create group roomsGroup",
        "tags": [
          "Rooms Group"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "contextId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "categoryId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "groupName",
                  "colorName"
                ],
                "properties": {
                  "groupName": {
                    "type": "string"
                  },
                  "colorName": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Create Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/roomsGroup/{contextId}/category/{categoryId}/group/{groupId}/read": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "read group roomsGroup",
        "summary": "Get group roomsGroup",
        "tags": [
          "Rooms Group"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "contextId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "categoryId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "groupId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BasicNode"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/roomsGroup/{contextId}/category/{categoryId}/group/{groupId}/update": {
      "put": {
        "security": [
          {
            "bearerAuth": [
              "read"
            ]
          }
        ],
        "description": "update group roomsGroup",
        "summary": "update group roomsGroup",
        "tags": [
          "Rooms Group"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "contextId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "categoryId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "groupId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "newNameGroup",
                  "newNameColor"
                ],
                "properties": {
                  "newNameGroup": {
                    "type": "string"
                  },
                  "newNameColor": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/roomsGroup/{contextId}/category/{categoryId}/group/{groupId}/delete": {
      "delete": {
        "security": [
          {
            "bearerAuth": [
              "read"
            ]
          }
        ],
        "description": "delete group roomsGroup",
        "summary": "delete group roomsGroup",
        "tags": [
          "Rooms Group"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "contextId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "categoryId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "groupId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/equipementsGroup/list": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Return list of contexts equipements Group",
        "summary": "Gets a list of contexts equipements Group",
        "tags": [
          "Equipements Group"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Context"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/equipementsGroup/{id}/tree": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Return tree of context equipements Group",
        "summary": "Get a tree context by ID",
        "tags": [
          "Equipements Group"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContextTree"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/equipementsGroup/create": {
      "post": {
        "security": [
          {
            "bearerAuth": [
              "read"
            ]
          }
        ],
        "description": "create equipements Group context",
        "summary": "create equipements Group context",
        "tags": [
          "Equipements Group"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "contextName"
                ],
                "properties": {
                  "contextName": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Create Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/equipementsGroup/{id}/read": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "read group equipements Group",
        "summary": "Gets group equipements Group",
        "tags": [
          "Equipements Group"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Context"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/equipementsGroup/{id}/update": {
      "put": {
        "security": [
          {
            "bearerAuth": [
              "read"
            ]
          }
        ],
        "description": "update context equipements Group",
        "summary": "update context equipements Group",
        "tags": [
          "Equipements Group"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "newGroupEquipementContextName"
                ],
                "properties": {
                  "newGroupEquipementContextName": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/equipementsGroup/{id}/delete": {
      "delete": {
        "security": [
          {
            "bearerAuth": [
              "read"
            ]
          }
        ],
        "description": "delete equipements Group context",
        "summary": "delete equipements Group context",
        "tags": [
          "Equipements Group"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/equipementsGroup/{id}/category_list": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Return list of category equipements Group",
        "summary": "Gets a list of category equipements Group",
        "tags": [
          "Equipements Group"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CategoryEvent"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/equipementsGroup/{id}/create_category": {
      "post": {
        "security": [
          {
            "bearerAuth": [
              "read"
            ]
          }
        ],
        "description": "create category equipements group",
        "summary": "create category equipements group",
        "tags": [
          "Equipements Group"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "categoryName",
                  "iconName"
                ],
                "properties": {
                  "categoryName": {
                    "type": "string"
                  },
                  "iconName": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Create Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/equipementsGroup/{contextId}/category/{categoryId}/read": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "read category equipements Group",
        "summary": "Get category equipements Group",
        "tags": [
          "Equipements Group"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "contextId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "categoryId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BasicNode"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/equipementsGroup/{contextId}/category/{categoryId}/update": {
      "put": {
        "security": [
          {
            "bearerAuth": [
              "read"
            ]
          }
        ],
        "description": "update category equipements Group",
        "summary": "update category equipements Group",
        "tags": [
          "Equipements Group"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "contextId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "categoryId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "newNameCategory",
                  "newNameIcon"
                ],
                "properties": {
                  "newNameCategory": {
                    "type": "string"
                  },
                  "newNameIcon": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/equipementsGroup/{contextId}/category/{categoryId}/delete": {
      "delete": {
        "security": [
          {
            "bearerAuth": [
              "read"
            ]
          }
        ],
        "description": "delete category",
        "summary": "delete category",
        "tags": [
          "Equipements Group"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "contextId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "categoryId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/equipementsGroup/{contextId}/category/{categoryId}/group_list": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Return list of group equipements Group",
        "summary": "Gets a list of group equipements Group",
        "tags": [
          "Equipements Group"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "contextId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "categoryId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CategoryEvent"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/equipementsGroup/{contextId}/category/{categoryId}/create_group": {
      "post": {
        "security": [
          {
            "bearerAuth": [
              "read"
            ]
          }
        ],
        "description": "create group equipements Group",
        "summary": "create group equipements Group",
        "tags": [
          "Equipements Group"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "contextId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "categoryId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "groupName",
                  "colorName"
                ],
                "properties": {
                  "groupName": {
                    "type": "string"
                  },
                  "colorName": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Create Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/equipementsGroup/{contextId}/category/{categoryId}/group/{groupId}/read": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "read group equipements Group",
        "summary": "Get group equipements Group",
        "tags": [
          "Equipements Group"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "contextId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "categoryId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "groupId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BasicNode"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/equipementsGroup/{contextId}/category/{categoryId}/group/{groupId}/update": {
      "put": {
        "security": [
          {
            "bearerAuth": [
              "read"
            ]
          }
        ],
        "description": "update group equipements Group",
        "summary": "update group equipements Group",
        "tags": [
          "Equipements Group"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "contextId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64."
            }
          },
          {
            "in": "path",
            "name": "categoryId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "groupId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "newNameGroup",
                  "newNameColor"
                ],
                "properties": {
                  "newNameGroup": {
                    "type": "string"
                  },
                  "newNameColor": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/equipementsGroup/{contextId}/category/{categoryId}/group/{groupId}/delete": {
      "delete": {
        "security": [
          {
            "bearerAuth": [
              "read"
            ]
          }
        ],
        "description": "delete group equipements Group",
        "summary": "delete group equipements Group",
        "tags": [
          "Equipements Group"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "contextId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "categoryId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "groupId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/endPointsGroup/list": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Return list of contexts endPoints Group",
        "summary": "Gets a list of contexts endPoints Group",
        "tags": [
          "EndPoints Group"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Context"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/endPointsGroup/{id}/tree": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Return tree of context endPoints Group",
        "summary": "Get a tree context by ID",
        "tags": [
          "EndPoints Group"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContextTree"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/endPointsGroup/create": {
      "post": {
        "security": [
          {
            "bearerAuth": [
              "read"
            ]
          }
        ],
        "description": "create endPoints Group context",
        "summary": "create endPoints Group context",
        "tags": [
          "EndPoints Group"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "contextName"
                ],
                "properties": {
                  "contextName": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Create Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/endPointsGroup/{id}/read": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "read group endPoints Group",
        "summary": "Gets group endPoints Group",
        "tags": [
          "EndPoints Group"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Context"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/endPointsGroup/{id}/update": {
      "put": {
        "security": [
          {
            "bearerAuth": [
              "read"
            ]
          }
        ],
        "description": "update context endPoints Group",
        "summary": "update context endPoints Group",
        "tags": [
          "EndPoints Group"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "newGroupEndpointContextName"
                ],
                "properties": {
                  "newGroupEndpointContextName": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/endPointsGroup/{id}/delete": {
      "delete": {
        "security": [
          {
            "bearerAuth": [
              "read"
            ]
          }
        ],
        "description": "delete endPoints Group context",
        "summary": "delete endPoints Group context",
        "tags": [
          "EndPoints Group"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/endPointsGroup/{id}/category_list": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Return list of category endPoints Group",
        "summary": "Gets a list of category endPoints Group",
        "tags": [
          "EndPoints Group"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CategoryEvent"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/endPointsGroup/{id}/create_category": {
      "post": {
        "security": [
          {
            "bearerAuth": [
              "read"
            ]
          }
        ],
        "description": "create category endpoint group",
        "summary": "create category endpoint group",
        "tags": [
          "EndPoints Group"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "categoryName",
                  "iconName"
                ],
                "properties": {
                  "categoryName": {
                    "type": "string"
                  },
                  "iconName": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Create Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/endPointsGroup/{contextId}/category/{categoryId}/read": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "read category endPoints Group",
        "summary": "Get category endPoints Group",
        "tags": [
          "EndPoints Group"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "contextId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "categoryId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BasicNode"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/endPointsGroup/{contextId}/category/{categoryId}/update": {
      "put": {
        "security": [
          {
            "bearerAuth": [
              "read"
            ]
          }
        ],
        "description": "update category endPoints Group",
        "summary": "update category endPoints Group",
        "tags": [
          "EndPoints Group"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "contextId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "categoryId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "newNameCategory",
                  "newNameIcon"
                ],
                "properties": {
                  "newNameCategory": {
                    "type": "string"
                  },
                  "newNameIcon": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/endPointsGroup/{contextId}/category/{categoryId}/delete": {
      "delete": {
        "security": [
          {
            "bearerAuth": [
              "read"
            ]
          }
        ],
        "description": "delete category",
        "summary": "delete category",
        "tags": [
          "EndPoints Group"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "contextId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "categoryId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/endPointsGroup/{contextId}/category/{categoryId}/group_list": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Return list of group endPoints Group",
        "summary": "Gets a list of group endPoints Group",
        "tags": [
          "EndPoints Group"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "contextId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "categoryId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CategoryEvent"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/endPointsGroup/{contextId}/category/{categoryId}/create_group": {
      "post": {
        "security": [
          {
            "bearerAuth": [
              "read"
            ]
          }
        ],
        "description": "create group endPoints Group",
        "summary": "create group endPoints Group",
        "tags": [
          "EndPoints Group"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "contextId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "categoryId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "groupName",
                  "colorName"
                ],
                "properties": {
                  "groupName": {
                    "type": "string"
                  },
                  "colorName": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Create Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/endPointsGroup/{contextId}/category/{categoryId}/group/{groupId}/read": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "read group endPoints Group",
        "summary": "Get group endPoints Group",
        "tags": [
          "EndPoints Group"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "contextId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "categoryId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "groupId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BasicNode"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/endPointsGroup/{contextId}/category/{categoryId}/group/{groupId}/update": {
      "put": {
        "security": [
          {
            "bearerAuth": [
              "read"
            ]
          }
        ],
        "description": "update group endPoints Group",
        "summary": "update group endPoints Group",
        "tags": [
          "EndPoints Group"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "contextId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "categoryId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "groupId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "newNameGroup",
                  "newNameColor"
                ],
                "properties": {
                  "newNameGroup": {
                    "type": "string"
                  },
                  "newNameColor": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/endPointsGroup/{contextId}/category/{categoryId}/group/{groupId}/delete": {
      "delete": {
        "security": [
          {
            "bearerAuth": [
              "read"
            ]
          }
        ],
        "description": "delete group endPoints Group",
        "summary": "delete group endPoints Group",
        "tags": [
          "EndPoints Group"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "contextId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "categoryId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "groupId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/nomenclatureGroup/list": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Return list of contexts",
        "summary": "Gets a list of contexts nomenclature Group",
        "tags": [
          "Nomenclature Group"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Context"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/nomenclatureGroup/{id}/tree": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Return tree of context nomenclature",
        "summary": "Get a nomenclature context tree by ID",
        "tags": [
          "Nomenclature Group"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContextTree"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/nomenclatureGroup/create": {
      "post": {
        "security": [
          {
            "bearerAuth": [
              "read"
            ]
          }
        ],
        "description": "create nomenclature Group context",
        "summary": "create nomenclature Group context",
        "tags": [
          "Nomenclature Group"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "nomenclatureContextName"
                ],
                "properties": {
                  "nomenclatureContextName": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Create Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/nomenclatureGroup/{id}/read": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "read group nomenclature Group",
        "summary": "Gets group nomenclature Group",
        "tags": [
          "Nomenclature Group"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Context"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/nomenclatureGroup/{id}/update": {
      "put": {
        "security": [
          {
            "bearerAuth": [
              "read"
            ]
          }
        ],
        "description": "update nomenclature context",
        "summary": "update nomenclature context",
        "tags": [
          "Nomenclature Group"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "newNomenclatureContextName"
                ],
                "properties": {
                  "newNomenclatureContextName": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/nomenclatureGroup/{id}/delete": {
      "delete": {
        "security": [
          {
            "bearerAuth": [
              "read"
            ]
          }
        ],
        "description": "delete Nomenclature  context",
        "summary": "delete Nomenclature  context",
        "tags": [
          "Nomenclature Group"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/nomenclatureGroup/{id}/category_list": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Return list of category nomenclature Group",
        "summary": "Gets a list of category nomenclature Group",
        "tags": [
          "Nomenclature Group"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CategoryEvent"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/nomenclatureGroup/{id}/create_category": {
      "post": {
        "security": [
          {
            "bearerAuth": [
              "read"
            ]
          }
        ],
        "description": "create category Nomenclature",
        "summary": "create category Nomenclature",
        "tags": [
          "Nomenclature Group"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "categoryName",
                  "iconName"
                ],
                "properties": {
                  "categoryName": {
                    "type": "string"
                  },
                  "iconName": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Create Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/nomenclatureGroup/{contextId}/category/{categoryId}/read": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "read category nomenclature",
        "summary": "Get category nomenclature",
        "tags": [
          "Nomenclature Group"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "contextId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "categoryId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BasicNode"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/nomenclatureGroup/{contextId}/category/{categoryId}/update": {
      "put": {
        "security": [
          {
            "bearerAuth": [
              "read"
            ]
          }
        ],
        "description": "update category nomenclature",
        "summary": "update category nomenclature",
        "tags": [
          "Nomenclature Group"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "contextId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "categoryId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "newNameCategory",
                  "newNameIcon"
                ],
                "properties": {
                  "newNameCategory": {
                    "type": "string"
                  },
                  "newNameIcon": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/nomenclatureGroup/{contextId}/category/{categoryId}/delete": {
      "delete": {
        "security": [
          {
            "bearerAuth": [
              "read"
            ]
          }
        ],
        "description": "delete category nomenclature",
        "summary": "delete category nomenclature",
        "tags": [
          "Nomenclature Group"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "contextId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "categoryId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/nomenclatureGroup/{contextId}/category/{categoryId}/group_list": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Return list of group nomenclature Group",
        "summary": "Gets a list of group nomenclature Group",
        "tags": [
          "Nomenclature Group"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "contextId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "categoryId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CategoryEvent"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/nomenclatureGroup/{contextId}/category/{categoryId}/create_group": {
      "post": {
        "security": [
          {
            "bearerAuth": [
              "read"
            ]
          }
        ],
        "description": "create group nomenclature Group",
        "summary": "create group nomenclature Group",
        "tags": [
          "Nomenclature Group"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "contextId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "categoryId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "groupName",
                  "colorName"
                ],
                "properties": {
                  "groupName": {
                    "type": "string"
                  },
                  "colorName": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Create Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/nomenclatureGroup/{contextId}/category/{categoryId}/group/{groupId}/read": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "read group nomenclature Group",
        "summary": "Get group nomenclature Group",
        "tags": [
          "Nomenclature Group"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "contextId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "categoryId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "groupId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BasicNode"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/nomenclatureGroup/{contextId}/category/{categoryId}/group/{groupId}/update": {
      "put": {
        "security": [
          {
            "bearerAuth": [
              "read"
            ]
          }
        ],
        "description": "update group nomenclature Group",
        "summary": "update group nomenclature Group",
        "tags": [
          "Nomenclature Group"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "contextId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64."
            }
          },
          {
            "in": "path",
            "name": "categoryId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "groupId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "newNameGroup",
                  "newNameColor"
                ],
                "properties": {
                  "newNameGroup": {
                    "type": "string"
                  },
                  "newNameColor": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/nomenclatureGroup/{contextId}/category/{categoryId}/group/{groupId}/delete": {
      "delete": {
        "security": [
          {
            "bearerAuth": [
              "read"
            ]
          }
        ],
        "description": "delete group nomenclature Group",
        "summary": "delete group nomenclature Group",
        "tags": [
          "Nomenclature Group"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "contextId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "categoryId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "groupId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/BIM/getBimObjectsInfo": {
      "post": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Retrun the list of BimObjectsInfo",
        "summary": "Get getBimObjectsInfo",
        "tags": [
          "BIM"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "bimFileId": {
                      "description": "serverId or staticId of the BimFile",
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "integer"
                        }
                      ]
                    },
                    "bimObjects": {
                      "description": "dbIds in the viewer",
                      "type": "array",
                      "items": {
                        "type": "integer"
                      }
                    }
                  }
                },
                "required": [
                  "bimFileId",
                  "bimObjects"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Array of BimObjectsInfo",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IBimObjectsInfo"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/BIM/scene/default": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Retrun the default scene with it's items",
        "summary": "Get the default scene with it's items",
        "tags": [
          "BIM"
        ],
        "responses": {
          "200": {
            "description": "scene",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IScenesbody"
                }
              }
            }
          },
          "400": {
            "description": "scene not found"
          },
          "500": {
            "description": "internal error"
          }
        }
      }
    },
    "/api/v1/BIM/scene/{id}": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Retrun the target scene with it's items",
        "summary": "Get the target scene with it's items",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "dynamic or static id",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            }
          }
        ],
        "tags": [
          "BIM"
        ],
        "responses": {
          "200": {
            "description": "scene",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IScenesbody"
                }
              }
            }
          },
          "400": {
            "description": "scene not found"
          },
          "500": {
            "description": "internal error"
          }
        }
      }
    },
    "/api/v1/BIM/scene/list": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Retrun the list of scenes",
        "summary": "Get scenes of the list",
        "tags": [
          "BIM"
        ],
        "responses": {
          "200": {
            "description": "Array of scenes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ISceneListReturn"
                }
              }
            }
          },
          "500": {
            "description": "internal error"
          }
        }
      }
    },
    "/BIM/file": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "route of the static bim files",
        "tags": [
          "BIM"
        ],
        "responses": {
          "200": {
            "description": "the file"
          },
          "404": {
            "description": "not found"
          }
        }
      }
    },
    "/api/v1/node/{id}/add_note": {
      "post": {
        "security": [
          {
            "bearerAuth": [
              "read"
            ]
          }
        ],
        "description": "add a note",
        "summary": "add a note",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "note"
                ],
                "properties": {
                  "note": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Add Successfully"
          },
          "400": {
            "description": "Add not Successfully"
          }
        }
      }
    },
    "/api/v1/node/{id}/update_note": {
      "put": {
        "security": [
          {
            "bearerAuth": [
              "read"
            ]
          }
        ],
        "description": "update a note",
        "summary": "update a note",
        "tags": [
          "Notes"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "note"
                ],
                "properties": {
                  "note": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update Successfully"
          },
          "400": {
            "description": "Update not Successfully"
          }
        }
      }
    },
    "/api/v1/analytics/room/{id}/status/{option}": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Return status of room",
        "summary": "Get Return status of room",
        "tags": [
          "Analytics"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "option",
            "description": "choose an option among the three options, summary will give -note-the sum of tickets (part and equipment) by level of criticality-the sum of the alarms standard will give -Note -the list of tickets (part and equipment) with their name, note, -their workflow and their status -the list of alarms by equipment in the room detail will give  -Note -detailed list of tickets (part and equipment) -detailed list of alarms by equipment in the room",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Ticket"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/node/command": {
      "post": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Set command value",
        "summary": "Set command value",
        "tags": [
          "Command"
        ],
        "requestBody": {
          "description": "set current value, float attribute",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "propertyReference": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "dynamicId": {
                          "type": "string"
                        },
                        "keys": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "type": "string"
                              },
                              "value": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Command"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/command/room/{id}/blind": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Return blind state of a room",
        "summary": "Gets blind state of a room",
        "tags": [
          "Command"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Command"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      },
      "post": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Set command blind value",
        "summary": "Set command blind value",
        "tags": [
          "Command"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "set current value, float attribute",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "blindCurrentValue"
                ],
                "properties": {
                  "blindCurrentValue": {
                    "type": "number"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Command"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/command/room/{id}/light": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Return light state of a room",
        "summary": "Gets light state of a room",
        "tags": [
          "Command"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Command"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      },
      "post": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Set command light value",
        "summary": "Set command light value",
        "tags": [
          "Command"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "set current value, float attribute,",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "lightCurrentValue"
                ],
                "properties": {
                  "lightCurrentValue": {
                    "type": "number"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Command"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/command/room/{id}/temp": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Return temp state of a room",
        "summary": "Gets temp state of a room",
        "tags": [
          "Command"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Command"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      },
      "post": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Set command temp value",
        "summary": "Set command temp value",
        "tags": [
          "Command"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "set current value, float attribute",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "tempCurrentValue"
                ],
                "properties": {
                  "tempCurrentValue": {
                    "type": "number"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Command"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/command/floor/{id}/roomList_command_enable": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Return list of room command enable",
        "summary": "Gets a list of room command enable",
        "tags": [
          "Command"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Room"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/healthStatus": {
      "get": {
        "security": [
          {
            "OauthSecurity": [
              "readOnly"
            ]
          }
        ],
        "description": "Return list of health Status organ",
        "summary": "Gets a list of health Status organ",
        "tags": [
          "Health"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HealthStatus"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/nomenclatureGroup/{contextId}/profile_list": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Return list of nomenclature profiles",
        "summary": "Gets a list of nomenclature profiles",
        "tags": [
          "Nomenclature Group"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "contextId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProfilesList"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/find_node_in_context_by_date": {
      "post": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Find node object in a specific context by date",
        "summary": "Gets Node",
        "tags": [
          "Contexts/ontologies"
        ],
        "requestBody": {
          "description": "=> (context) use the dynamic ID <br>  => both fields (beginDate/endDate) are converted to GMT, so your search is a standard GMT query mechanism <br> => Date Format is \"DD-MM-YYYY\", \"DD-MM-YYYY HH:mm:ss\", \"DD MM YYYY\", \"DD MM YYYY HH:mm:ss\", \"DD/MM/YYYY\", \"DD/MM/YYYY HH:mm:ss\" <br> => the filter is applied to the directModifictionDate field <br> => directModificationDate is date of direct change on the node, example = declare a ticket on the piece node <br> => indirectModificationDate is change of a child or parent of the node, example = change a state of the ticket node linked to a piece node,",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "contextId",
                  "beginDate",
                  "endDate"
                ],
                "properties": {
                  "beginDate": {
                    "type": "string"
                  },
                  "endDate": {
                    "type": "string"
                  },
                  "contextId": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NodeWithDate"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/node/{id}/children": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Return node's children",
        "summary": "Gets Node children",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BasicNode"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      },
      "post": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Return node's children based on specified relations",
        "summary": "Gets Node children by relations (POST)",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Node dynamic Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BasicNode"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/node/children_multiple": {
      "post": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Returns an array of lists of children nodes for multiple parent nodes based on specified relations, including details of the child nodes or error information.",
        "summary": "Retrieve children of multiple nodes based on relations",
        "tags": [
          "Nodes"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "dynamicId": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "relations": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success - All children nodes information for the specified relations fetched successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BasicNodeMultiple"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial Content - Some children node information based on the specified relations could not be fetched.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/BasicNodeMultiple"
                      },
                      {
                        "$ref": "#/components/schemas/Error"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid input or parameters."
          }
        }
      }
    },
    "/api/v1/node/control_endpoint_list_multiple": {
      "post": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Returns an array of lists of control endpoints for multiple nodes, or error details.",
        "summary": "Gets lists of control endpoints for multiple nodes",
        "tags": [
          "Nodes"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success - All control endpoint lists fetched successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EndPointNode"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial Content - Some control endpoint lists could not be fetched",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/EndPointNode"
                      },
                      {
                        "$ref": "#/components/schemas/Error"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/node/endpoint_list_multiple": {
      "post": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Returns an array of lists of endpoints for multiple nodes, or error details.",
        "summary": "Gets lists of endpoints for multiple nodes",
        "tags": [
          "Nodes"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success - All endpoint lists fetched successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EndPointNodeWithId"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial Content - Some endpoint lists could not be fetched",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/EndPointNodeWithId"
                      },
                      {
                        "$ref": "#/components/schemas/Error"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/node/event_list_multiple": {
      "post": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Returns events of multiple nodes, including error details where applicable.",
        "summary": "Get list of events for multiple nodes",
        "tags": [
          "Nodes"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success - All events fetched",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "dynamicId": {
                        "type": "integer"
                      },
                      "events": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/Event"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial Content - Some events could not be fetched",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "object",
                        "properties": {
                          "dynamicId": {
                            "type": "integer"
                          },
                          "events": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/Event"
                            }
                          }
                        }
                      },
                      {
                        "$ref": "#/components/schemas/Error"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/node/{id}/parents": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Return node's parents",
        "summary": "Gets Node parents",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BasicNode"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      },
      "post": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Return node's parents based on specified relations",
        "summary": "Gets Node parents by relations (POST)",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Node dynamic Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BasicNode"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/node/parents_multiple": {
      "post": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Returns an array of lists of children nodes for multiple parent nodes based on specified relations, including details of the child nodes or error information.",
        "summary": "Retrieve children of multiple nodes based on relations",
        "tags": [
          "Nodes"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "dynamicId": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "relations": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success - All children nodes information for the specified relations fetched successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BasicNodeMultiple"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial Content - Some children node information based on the specified relations could not be fetched.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/BasicNodeMultiple"
                      },
                      {
                        "$ref": "#/components/schemas/Error"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid input or parameters."
          }
        }
      }
    },
    "/api/v1/node/read_control_endpoint": {
      "post": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Get control endpoint value",
        "summary": "Get control endpoint value",
        "tags": [
          "Nodes"
        ],
        "requestBody": {
          "description": "get current value, float attribute",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "propertyReference": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "dynamicId": {
                          "type": "string"
                        },
                        "keys": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Command"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/node/ticket_list_multiple": {
      "post": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Returns a list of ticket objects for multiple nodes, including error details where applicable.",
        "summary": "Get list of ticket objects for multiple nodes",
        "tags": [
          "Nodes"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success - All ticket lists fetched",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "dynamicId": {
                        "type": "integer"
                      },
                      "tickets": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/Ticket"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial Content - Some tickets could not be fetched",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "object",
                        "properties": {
                          "dynamicId": {
                            "type": "integer"
                          },
                          "tickets": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/Ticket"
                            }
                          }
                        }
                      },
                      {
                        "$ref": "#/components/schemas/Error"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/node/read_multiple": {
      "post": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Returns an array of node objects with parent and children relation",
        "summary": "Gets Multiple Nodes",
        "tags": [
          "Nodes"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success - All nodes fetched successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Node"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial Content - Some nodes could not be fetched",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/Node"
                      },
                      {
                        "$ref": "#/components/schemas/Error"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/node/convert_base_64": {
      "post": {
        "security": [
          {
            "bearerAuth": [
              "read"
            ]
          }
        ],
        "description": "Find node object in a specific context",
        "summary": "Gets Node",
        "tags": [
          "Nodes"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "imageString"
                ],
                "properties": {
                  "imageString": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Node"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/node/categoriesByName/read_multiple": {
      "post": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Read multiple categories attributes for multiple nodes",
        "summary": "Read multiple categories attributes for multiple nodes",
        "tags": [
          "Node Attribut Categories"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "object",
                  "required": [
                    "dynamicId",
                    "categoryNames"
                  ],
                  "properties": {
                    "dynamicId": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "categoryNames": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success - All attribute nodes info fetched",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CategoriesAttributesMultiple"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial Content - Some attribute info could not be fetched",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/CategoriesAttributesMultiple"
                      },
                      {
                        "$ref": "#/components/schemas/Error"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/node/categoryByName/{categoryName}/read_multiple": {
      "post": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Read category attribute for multiple nodes",
        "summary": "Read category attribute for multiple nodes",
        "tags": [
          "Node Attribut Categories"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "categoryName",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success - All attribute nodes info fetched",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CategoriesAttributeMultiple"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial Content - Some attribute info could not be fetched",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/CategoriesAttributeMultiple"
                      },
                      {
                        "$ref": "#/components/schemas/Error"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/node/attribute_list_multiple": {
      "post": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Returns a list of attributes for multiple nodes, including error details where applicable.",
        "summary": "Get list of attributes for multiple nodes",
        "tags": [
          "Node Attributs"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success - All attribute lists fetched",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "dynamicId": {
                        "type": "integer"
                      },
                      "categoryAttributes": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/NodeAttribut"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial Content - Some attributes could not be fetched",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "object",
                        "properties": {
                          "dynamicId": {
                            "type": "integer"
                          },
                          "categoryAttributes": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/NodeAttribut"
                            }
                          }
                        }
                      },
                      {
                        "$ref": "#/components/schemas/Error"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/equipment/{id}/read_static_details": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "read static details of equipment",
        "summary": "Gets static details of equipment",
        "tags": [
          "Geographic Context"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StaticDetailsRoom"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/equipment/read_static_details_multiple": {
      "post": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Read static details of multiple equipments",
        "summary": "Gets static details of multiple equipments",
        "tags": [
          "Geographic Context"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success - All equipment static details fetched",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StaticDetailsRoom"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial Content - Some equipment static details could not be fetched",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/StaticDetailsRoom"
                      },
                      {
                        "$ref": "#/components/schemas/Error"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/equipment/{id}/get_position": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Get equipement position",
        "summary": "Get equipement position",
        "tags": [
          "Geographic Context"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Position"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/equipment/get_position_multiple": {
      "post": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Return positions for multiple equipment",
        "summary": "Gets positions for multiple equipment",
        "tags": [
          "Geographic Context"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success - All equipment positions fetched",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Position"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial Content - Some equipment positions could not be fetched",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/Position"
                      },
                      {
                        "$ref": "#/components/schemas/Error"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/room/{id}/get_position": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Get room position",
        "summary": "Get room position",
        "tags": [
          "Geographic Context"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoomPosition"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/room/get_position_multiple": {
      "post": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Return position for multiple rooms",
        "summary": "Gets position for multiple rooms",
        "tags": [
          "Geographic Context"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success - All room positions fetched",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoomPosition"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial Content - Some room positions could not be fetched",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/RoomPosition"
                      },
                      {
                        "$ref": "#/components/schemas/Error"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/room/read_details_multiple": {
      "post": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Read details of multiple rooms, including error details where applicable.",
        "summary": "Gets details of multiple rooms",
        "tags": [
          "Geographic Context"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success - All room details fetched",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoomDetailsWithId"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial Content - Some room details could not be fetched",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/RoomDetailsWithId"
                      },
                      {
                        "$ref": "#/components/schemas/Error"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/room/{id}/read_static_details": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "read static details of room",
        "summary": "Gets static details of room",
        "tags": [
          "Geographic Context"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StaticDetailsRoom"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/room/read_static_details_multiple": {
      "post": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Read static details of multiple rooms",
        "summary": "Gets static details of multiple rooms",
        "tags": [
          "Geographic Context"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success - All room static details fetched",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StaticDetailsRoom"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial Content - Some room static details could not be fetched",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/StaticDetailsRoom"
                      },
                      {
                        "$ref": "#/components/schemas/Error"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/room/equipment_list_multiple": {
      "post": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Return list of equipment for multiple rooms",
        "summary": "Gets a list of equipment for multiple rooms",
        "tags": [
          "Geographic Context"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success - All equipment lists fetched",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "dynamicId": {
                        "type": "integer"
                      },
                      "equipments": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/Equipement"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial Content - Some equipment lists could not be fetched",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/Equipement"
                      },
                      {
                        "$ref": "#/components/schemas/Error"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/room/{id}/inventory": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Reads details of a room including its inventory",
        "summary": "Gets inventory details of a room",
        "tags": [
          "Geographic Context"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Use the dynamic ID of the room",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventoryRoomDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/room/inventory_multiple": {
      "post": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Returns inventory details for multiple rooms",
        "summary": "Gets inventory for multiple rooms",
        "tags": [
          "Geographic Context"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success - All room inventories fetched",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InventoryRoomDetails"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial Content - Some room inventories could not be fetched",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/InventoryRoomDetails"
                      },
                      {
                        "$ref": "#/components/schemas/Error"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/room/reference_object_list_multiple": {
      "post": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Return reference objects for multiple rooms",
        "summary": "Gets reference objects for multiple rooms",
        "tags": [
          "Geographic Context"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success - All reference objects fetched",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoomReferenceObjectResponse"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial Content - Some reference objects could not be fetched",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/RoomReferenceObjectResponse"
                      },
                      {
                        "$ref": "#/components/schemas/Error"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/endpoint/read_multiple": {
      "post": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Reads the current values for multiple endpoints",
        "summary": "Read the current values of multiple endpoints",
        "tags": [
          "IoTNetwork & Time Series"
        ],
        "requestBody": {
          "description": "An array of endpoint IDs to fetch the current values for",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success - All endpoints' current values fetched successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CurrentValueWithId"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial Content - Some endpoints' current values could not be fetched",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/CurrentValueWithId"
                      },
                      {
                        "$ref": "#/components/schemas/Error"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Incorrect request format or server error"
          }
        }
      }
    },
    "/api/v1/endpoint/timeSeries/readCurrentDay_multiple": {
      "post": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Retrieve time series data for the current day for multiple IDs.",
        "summary": "Time series data for the current day for multiple IDs",
        "tags": [
          "IoTNetwork & Time Series"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success - All time series data for the current day fetched",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TimeserieWithID"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial Content - Some time series data for the current day could not be fetched",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/TimeserieWithID"
                      },
                      {
                        "$ref": "#/components/schemas/Error"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Incorrect request format or data"
          }
        }
      }
    },
    "/api/v1/endpoint/timeSeries/readCurrentMonth_multiple": {
      "post": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Retrieve time series data for the current month for multiple IDs.",
        "summary": "Time series data for the current month for multiple IDs",
        "tags": [
          "IoTNetwork & Time Series"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success - All time series data for the current month fetched",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TimeserieWithID"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial Content - Some time series data for the current month could not be fetched",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/TimeserieWithID"
                      },
                      {
                        "$ref": "#/components/schemas/Error"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Incorrect request format or data"
          }
        }
      }
    },
    "/api/v1/endpoint/timeSeries/readCurrentWeek_multiple": {
      "post": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Get time series data of the last week for multiple IDs",
        "summary": "Get time series data of the last week for multiple IDs",
        "tags": [
          "IoTNetwork & Time Series"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success - All time series data of the last week fetched",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TimeserieWithID"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial Content - Some time series data of the last week could not be fetched",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/TimeserieWithID"
                      },
                      {
                        "$ref": "#/components/schemas/Error"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/endpoint/timeSeries/readCurrentYear_multiple": {
      "post": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Get time series of the current year for multiple IDs",
        "summary": "Get time series of the current year for multiple IDs",
        "tags": [
          "IoTNetwork & Time Series"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success - All time series data of the current year fetched",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TimeserieWithID"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial Content - Some time series data of the current year could not be fetched",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/TimeserieWithID"
                      },
                      {
                        "$ref": "#/components/schemas/Error"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/endpoint/timeSeries/readFromLast24H_multiple": {
      "post": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Get time series of the last 24 hours for multiple IDs",
        "summary": "Get time series of the last 24 hours for multiple IDs",
        "tags": [
          "IoTNetwork & Time Series"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success - All time series data of the last 24 hours fetched",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TimeserieWithID"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial Content - Some time series data of the last 24 hours could not be fetched",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/TimeserieWithID"
                      },
                      {
                        "$ref": "#/components/schemas/Error"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/endpoint/timeSeries/read_multiple/{begin}/{end}": {
      "post": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Get time series for multiple IDs",
        "summary": "Get time series for multiple IDs",
        "tags": [
          "IoTNetwork & Time Series"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "begin",
            "description": "Date Format is DD-MM-YYYY HH:mm:ss or DD MM YYYY HH:mm:ss",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "end",
            "description": "Date Format is DD-MM-YYYY HH:mm:ss or DD MM YYYY HH:mm:ss",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success - All time series data fetched",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TimeserieWithID"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial Content - Some time series data could not be fetched",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/TimeserieWithID"
                      },
                      {
                        "$ref": "#/components/schemas/Error"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/ticket/read_details_multiple": {
      "post": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Returns details for multiple tickets",
        "summary": "Get details of multiple tickets",
        "tags": [
          "Workflow & ticket"
        ],
        "requestBody": {
          "description": "An array of ticket IDs to fetch details for",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success - All ticket details fetched",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TicketDetails"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial Content - Some ticket details could not be fetched",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/TicketDetails"
                      },
                      {
                        "$ref": "#/components/schemas/Error"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/ticket/{id}/create_event": {
      "post": {
        "security": [
          {
            "bearerAuth": [
              "read"
            ]
          }
        ],
        "description": "create event of ticket",
        "summary": "create event of ticket",
        "tags": [
          "Workflow & ticket"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "startDate",
                  "endDate",
                  "description",
                  "repeat",
                  "repeatEnd",
                  "count",
                  "period",
                  "user"
                ],
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "startDate": {
                    "type": "string",
                    "default": "DD MM YYYY HH:mm:ss"
                  },
                  "endDate": {
                    "type": "string",
                    "default": "DD MM YYYY HH:mm:ss"
                  },
                  "description": {
                    "type": "string"
                  },
                  "repeat": {
                    "type": "boolean"
                  },
                  "repeatEnd": {
                    "type": "string",
                    "default": "DD MM YYYY HH:mm:ss"
                  },
                  "count": {
                    "type": "number"
                  },
                  "period": {
                    "type": "string",
                    "default": "day|week|month|year"
                  },
                  "user": {
                    "type": "object",
                    "required": [
                      "userName",
                      "email",
                      "gsm"
                    ],
                    "properties": {
                      "userName": {
                        "type": "string"
                      },
                      "email": {
                        "type": "string"
                      },
                      "gsm": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Event"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/ticket/{id}/event_list": {
      "post": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Returns events of ticket",
        "summary": "Get list events of ticket",
        "tags": [
          "Workflow & ticket"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "you have 3 choices to fill in the \"period\" field   (*all* => to retrieve the entire list of events,   *today* => to retrieve today's events,   *week* = > to retrieve the events of the current week,   *dateInterval* or *undefined* to retrieve a precise date by filling in the \"startDate\" and \"endDate\" fields)",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "period"
                ],
                "properties": {
                  "startDate": {
                    "type": "string"
                  },
                  "endDate": {
                    "type": "string"
                  },
                  "period": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Event"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/ticket/find_entity_multiple": {
      "post": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Returns entities for multiple tickets",
        "summary": "Get entities of multiple tickets",
        "tags": [
          "Workflow & ticket"
        ],
        "requestBody": {
          "description": "An array of ticket IDs to fetch entities for",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success - All entities fetched for the tickets",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BasicNode"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial Content - Some entities could not be fetched",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/BasicNode"
                      },
                      {
                        "$ref": "#/components/schemas/Error"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/eventContext/{ContextId}/eventCategory/{CategoryId}/eventGroup/{GroupId}/event_list": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "read"
            ]
          }
        ],
        "description": "Return list of event",
        "summary": "Gets a list of event",
        "tags": [
          "Calendar & Event"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ContextId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "CategoryId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "GroupId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Event"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/event/read_multiple": {
      "post": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Returns details for multiple events",
        "summary": "Get details of multiple events",
        "tags": [
          "Calendar & Event"
        ],
        "requestBody": {
          "description": "An array of event IDs to fetch details for",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success - All event details fetched",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Event"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial Content - Some event details could not be fetched",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/Event"
                      },
                      {
                        "$ref": "#/components/schemas/Error"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "List of events is not loaded"
          }
        }
      }
    },
    "/api/v1/roomsGroup/{contextId}/category/{categoryId}/group/{groupId}/addRooms": {
      "post": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "add room list",
        "summary": "add room",
        "tags": [
          "Rooms Group"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "contextId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "categoryId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "groupId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "array of string (dynamicId)",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "number"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BasicNode"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/roomsGroup/{contextId}/category/{categoryId}/group/{groupId}/deleteRooms": {
      "delete": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "read room list",
        "summary": "Get room list from rooms Group",
        "tags": [
          "Rooms Group"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "contextId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "categoryId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "groupId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "array of string (dynamicId)",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "number"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BasicNode"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/roomsGroup/{contextId}/category/{categoryId}/group/{groupId}/roomList": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "read room list",
        "summary": "Get room list from rooms Group",
        "tags": [
          "Rooms Group"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "contextId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "categoryId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "groupId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BasicNode"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/equipementsGroup/{contextId}/category/{categoryId}/group/{groupId}/addEquipements": {
      "post": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "add equipement list",
        "summary": "add equipement",
        "tags": [
          "Equipements Group"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "contextId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "categoryId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "groupId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "array of string (dynamicId)",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "number"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BasicNode"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/equipementsGroup/{contextId}/category/{categoryId}/group/{groupId}/deleteEquipement": {
      "delete": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "delete equipement from group",
        "summary": "delete equipement from group",
        "tags": [
          "Equipements Group"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "contextId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "categoryId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "groupId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "array of string (dynamicId)",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "number"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BasicNode"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/equipementsGroup/{contextId}/category/{categoryId}/group/{groupId}/equipementList": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "read equipements List",
        "summary": "Get equipements List",
        "tags": [
          "Equipements Group"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "contextId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "categoryId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "groupId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BasicNode"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/endPointsGroup/{contextId}/category/{categoryId}/group/{groupId}/addEndpoint": {
      "post": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "add  endpoint to group",
        "summary": "add  endpoint to group",
        "tags": [
          "EndPoints Group"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "contextId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "categoryId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "groupId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "array of string (dynamicId)",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "number"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BasicNode"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/endPointsGroup/{contextId}/category/{categoryId}/group/{groupId}/deleteEndpoint": {
      "delete": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "delete  endpoint",
        "summary": "delete  endpoint",
        "tags": [
          "EndPoints Group"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "contextId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "categoryId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "groupId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "array of string (dynamicId)",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "number"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BasicNode"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/endPointsGroup/{contextId}/category/{categoryId}/group/{groupId}/endpointList": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "read  endpointList",
        "summary": "Get  endpointList",
        "tags": [
          "EndPoints Group"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "contextId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "categoryId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "groupId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BasicNode"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/BIM/BIMFileContext/list": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "readOnly"
            ]
          }
        ],
        "description": "Return list of BIM File Contexts",
        "summary": "Get the list  BIM File Contexts",
        "tags": [
          "BIM"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BIMFileContext"
                  }
                }
              }
            }
          },
          "400": {
            "description": "scene not found"
          },
          "500": {
            "description": "internal error"
          }
        }
      }
    }
  }
}