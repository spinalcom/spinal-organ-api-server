{
  "openapi": "3.0.1",
  "info": {
    "title": "SpinalCore Graph API",
    "version": "1.0.0",
    "description": "Welcome to the reference documentation for the Spinalcore Digital Twin REST API! </br></br>To learn about the common use cases and concept of Spinalcore REST APIs, check out our resource center  (https://resourcecenter.fr.spinalcom.com/ressources-d%C3%A9veloppeur).</br></br>In addition to Spinalcore API Reference, we also provide complete documentation for integrator that need to install and implement Spinalcore Digital Twin Operating System on their built environment (https://resourcecenter.fr.spinalcom.com/ressources-int%C3%A9grateur)",
    "termsOfService": "",
    "contact": {
      "email": "developers@spinalcom.com"
    },
    "x-logo": {
      "url": "/logo.png"
    },
    "x-preferred": true,
    "x-providerName": "spinalcom.com",
    "x-unofficialSpec": true
  },
  "components": {
    "securitySchemes": {
      "OauthSecurity": {
        "type": "oauth2",
        "description": "This API uses OAuth 2 with the implicit grant flow. [More info](https://api.example.com/docs/auth)",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "http://localhost:8080/oauth2/token",
            "scopes": {
              "read": "read request",
              "admin": "admin request"
            }
          }
        }
      }
    }
  },
  "paths": {
    "/api/v1/context/list": {
      "get": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "Return list of contexts",
        "summary": "Gets a list of contexts",
        "tags": ["Contexts/ontologies"],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Context"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/context/{id}/tree": {
      "get": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "Return tree of context",
        "summary": "Get a tree context by ID",
        "tags": ["Contexts/ontologies"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/ContextTree"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/context/{id}/tree/{numberOfLevel}/depth": {
      "get": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "Return tree of context",
        "summary": "Get a tree context by ID",
        "tags": ["Contexts/ontologies"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "numberOfLevel",
            "description": "the number of levels to go",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/ContextTree"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/context/{id}/nodeTypeList": {
      "get": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "Return node type list of context",
        "summary": "Get type list in context with given ID context",
        "tags": ["Contexts/ontologies"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/ContextNodeTypeList"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/context/{idContext}/node/{idNode}/nodeTypeList": {
      "get": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "Return node type list of context",
        "summary": "Get type list from node in context with given IDcontext ans IDnode",
        "tags": ["Contexts/ontologies"],
        "parameters": [
          {
            "in": "path",
            "name": "idContext",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "idNode",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/ContextNodeTypeList"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/context/{id}/nodesOfType/{type}": {
      "get": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "Return nodes of type in context",
        "summary": "Gets a nodes of type with given ID context and Type",
        "tags": ["Contexts/ontologies"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "type",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ContextNodeofTypes"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/context/{contextId}/node/{nodeId}/nodesOfType/{type}": {
      "get": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "return the nodes of type from a node in a context",
        "summary": "Get nodes of type from a node in a context with given IDcontext IDnode and type",
        "tags": ["Contexts/ontologies"],
        "parameters": [
          {
            "in": "path",
            "name": "contextId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "nodeId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "type",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ContextNodeofTypes"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/context/{idContext}/node/{idNode}/tree": {
      "get": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "Return tree of node in context",
        "summary": "Get a tree of node context with given IDcontext and IDnode",
        "tags": ["Contexts/ontologies"],
        "parameters": [
          {
            "in": "path",
            "name": "idContext",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "idNode",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/ContextTree"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/node/{id}/read": {
      "get": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "Return node object with parent and children relation",
        "summary": "Gets Node",
        "tags": ["Nodes"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/Node"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/relation/{id}/children_node": {
      "get": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "Return cildrens of relation node",
        "summary": "Get childrens of relation with given ID node",
        "tags": ["Nodes"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Node"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/relation/{id}/parent_node": {
      "get": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "Return parents of relation node",
        "summary": "Gets parents of relation with given ID node",
        "tags": ["Nodes"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Node"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/node/{id}/endpoint_list": {
      "get": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "Return list of endpoint",
        "summary": "Gets a list of endpoint",
        "tags": ["Nodes"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/EndPointNode"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/node/{id}/control_endpoint_list": {
      "get": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "Return list of control endpoint",
        "summary": "Gets a list of control endpoint",
        "tags": ["Nodes"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/EndPointNode"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/node/{id}/event_list": {
      "get": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "Returns events of node",
        "summary": "Get list events of node",
        "tags": ["Nodes"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Event"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/node/{id}/file_list": {
      "get": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "Returns files of node",
        "summary": "Get list files of node",
        "tags": ["Nodes"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/File"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/node/{id}/note_list": {
      "get": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "Returns notes of node",
        "summary": "Get list notes of node",
        "tags": ["Nodes"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Note"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/node/{id}/ticket_list": {
      "get": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "Returns list of tickets object",
        "summary": "Get list of tickets object",
        "tags": ["Nodes"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Ticket"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/node/{id}/upload_file": {
      "post": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "Upload a Doc",
        "summary": "Upload a Doc",
        "tags": ["Nodes"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "file": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Upload Successfully"
          },
          "400": {
            "description": "Upload not Successfully"
          }
        }
      }
    },
    "/api/v1/node/{id}/download_file": {
      "post": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "Download a Doc",
        "summary": "Download a Doc",
        "tags": ["Nodes"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Download Successfully"
          },
          "400": {
            "description": "Download not Successfully"
          }
        }
      }
    },
    "/api/v1/node/{id}/categoriesList": {
      "get": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "Returns list of categories atrribut",
        "summary": "Get list of categories atrribut",
        "tags": ["Node Attribut Categories"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/CategoriesAttribute"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/node/{id}/category/create": {
      "post": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "create category attribute in specific node",
        "summary": "create category attribut",
        "tags": ["Node Attribut Categories"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["categoryName"],
                "properties": {
                  "categoryName": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Created successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/node/{nodeId}/category/{categoryId}/delete": {
      "delete": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "Delete category from graph",
        "summary": "Delete category attribut",
        "tags": ["Node Attribut Categories"],
        "parameters": [
          {
            "in": "path",
            "name": "nodeId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "categoryId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/node/{nodeId}/categoryByName/{categoryName}/delete": {
      "delete": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "Delete category from graph",
        "summary": "Delete category attribut",
        "tags": ["Node Attribut Categories"],
        "parameters": [
          {
            "in": "path",
            "name": "nodeId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "categoryName",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/node/{nodeId}/categoryById/{categoryId}/read": {
      "get": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "read category attribut in specific node",
        "summary": "read category attribut",
        "tags": ["Node Attribut Categories"],
        "parameters": [
          {
            "in": "path",
            "name": "nodeId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "categoryId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/CategoriesAttribute"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/node/{nodeId}/categoryByName/{categoryName}/read": {
      "get": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "read category attribut in specific node",
        "summary": "read category attribut",
        "tags": ["Node Attribut Categories"],
        "parameters": [
          {
            "in": "path",
            "name": "nodeId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "categoryName",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/CategoriesAttribute"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/node/{nodeId}/categoryById/{categoryId}/update": {
      "put": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "update category attribut in specific node",
        "summary": "update category attribut",
        "tags": ["Node Attribut Categories"],
        "parameters": [
          {
            "in": "path",
            "name": "nodeId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "categoryId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["categoryName"],
                "properties": {
                  "categoryName": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/node/{nodeId}/categoryByName/{categoryName}/update": {
      "put": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "update category attribut in specific node",
        "summary": "update category attribut",
        "tags": ["Node Attribut Categories"],
        "parameters": [
          {
            "in": "path",
            "name": "nodeId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "categoryName",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["categoryName"],
                "properties": {
                  "categoryName": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/node/{id}/attributsList": {
      "get": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "Returns list of attributs",
        "summary": "Get list of attributs",
        "tags": ["Node Attributs"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/NodeAttribut"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/node/{idNode}/category/{idCategory}/attribut/create": {
      "post": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "Create attribute",
        "summary": "create an attribute",
        "tags": ["Node Attributs"],
        "parameters": [
          {
            "in": "path",
            "name": "idNode",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "idCategory",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "attributeLabel",
                  "attributeValue",
                  "attributeType",
                  "attributeUnit"
                ],
                "properties": {
                  "attributeLabel": {
                    "type": "string"
                  },
                  "attributeValue": {
                    "type": "string"
                  },
                  "attributeType": {
                    "type": "string"
                  },
                  "attributeUnit": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Create Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/node/{idNode}/category/{idCategory}/attribut/{attributName}/update": {
      "put": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "update attribute",
        "summary": "update an attribut",
        "tags": ["Node Attributs"],
        "parameters": [
          {
            "in": "path",
            "name": "idNode",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "idCategory",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "attributName",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "attributeLabel",
                  "attributeValue",
                  "attributeType",
                  "attributeUnit"
                ],
                "properties": {
                  "attributeLabel": {
                    "type": "string"
                  },
                  "attributeValue": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "update Successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/NodeAttribut"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/node/{idNode}/category/{idCategory}/attribute/{attributName}/delete": {
      "delete": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "Delete an attribute",
        "summary": "delete an attribut",
        "tags": ["Node Attributs"],
        "parameters": [
          {
            "in": "path",
            "name": "idNode",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "idCategory",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "attributName",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/building/read": {
      "get": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "read building",
        "summary": "Gets building",
        "tags": ["Geographic Context"],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/Building"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/geographicContext/tree": {
      "get": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "Return the geographic context",
        "summary": "Get the geographic context",
        "tags": ["Geographic Context"],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/ContextTree"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/geographicContext/space": {
      "get": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "Return space tree of context",
        "summary": "Get a space tree context",
        "tags": ["Geographic Context"],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/ContextTree"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/floor/list": {
      "get": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "Return list of floor",
        "summary": "Gets a list of floor",
        "tags": ["Geographic Context"],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Floor"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/floor/{id}/floor_details": {
      "get": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "Return details of a floor",
        "summary": "Gets a details of a floor",
        "tags": ["Geographic Context"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/FloorDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/floor/{id}/reference_Objects_list": {
      "get": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "Return reference objects of a floor",
        "summary": "Gets a reference objects of a floor",
        "tags": ["Geographic Context"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Equipement"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/floor/{id}/room_list": {
      "get": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "Return list of room",
        "summary": "Gets a list of room",
        "tags": ["Geographic Context"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Room"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/room/{id}/read": {
      "get": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "read room",
        "summary": "Gets room",
        "tags": ["Geographic Context"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/Room"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/room/{id}/read_details": {
      "get": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "read details of room",
        "summary": "Gets details of room",
        "tags": ["Geographic Context"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/RoomDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/room/{id}/endpoint_list": {
      "get": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "Return list of endpoint",
        "summary": "Gets a list of endpoint",
        "tags": ["Geographic Context"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/EndPointRoom"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/room/{id}/control_endpoint_list": {
      "get": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "Return list of control endpoint",
        "summary": "Gets a list of control endpoint",
        "tags": ["Geographic Context"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/EndPointRoom"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/room/{id}/equipement_list": {
      "get": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "Return list of equipement",
        "summary": "Gets a list of equipement",
        "tags": ["Geographic Context"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Equipement"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/room/{id}/reference_Objects_list": {
      "get": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "Return reference objects of a room",
        "summary": "Gets a reference objects of a room",
        "tags": ["Geographic Context"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Equipement"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/room/{id}/notes": {
      "get": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "Returns notes of room",
        "summary": "Get list notes of room",
        "tags": ["Geographic Context"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Note"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/room/{id}/ticket_list": {
      "get": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "Returns list of tickets of room",
        "summary": "Get list of tickets of room",
        "tags": ["Geographic Context"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Ticket"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/room/{id}/event_list": {
      "post": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "Returns events of room",
        "summary": "Get list events of room",
        "tags": ["Geographic Context"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "you have 3 choices to fill in the \"period\" field   (*all* => to retrieve the entire list of events,   *today* => to retrieve today's events,   *week* = > to retrieve the events of the current week,   *dateInterval* or *undefined* to retrieve a precise date by filling in the \"startDate\" and \"endDate\" fields)",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["period"],
                "properties": {
                  "startDate": {
                    "type": "string"
                  },
                  "endDate": {
                    "type": "string"
                  },
                  "period": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Event"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/room/{id}/file_list": {
      "get": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "Returns files of room",
        "summary": "Get list files of room",
        "tags": ["Geographic Context"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/File"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/equipement/{id}/read": {
      "get": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "read equipement",
        "summary": "Gets equipement",
        "tags": ["Geographic Context"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/Equipement"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/equipement/{id}/endpoint_list": {
      "get": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "Return list of endpoint",
        "summary": "Gets a list of endpoint",
        "tags": ["Geographic Context"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/EndPointRoom"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/equipement/{id}/control_endpoint_list": {
      "get": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "Return list of control endpoint",
        "summary": "Gets a list of control endpoint",
        "tags": ["Geographic Context"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/EndPointRoom"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/equipement/{id}/note_list": {
      "get": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "Returns notes of equipement",
        "summary": "Get list notes of equipement",
        "tags": ["Geographic Context"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Note"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/equipement/{id}/ticket_list": {
      "get": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "Returns list of tickets of equipement",
        "summary": "Get list of tickets of equipement",
        "tags": ["Geographic Context"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Ticket"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/equipement/{id}/event_list": {
      "get": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "Returns events of equipement",
        "summary": "Get list events of equipement",
        "tags": ["Geographic Context"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Event"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/equipement/{id}/file_list": {
      "get": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "Returns files of equipement",
        "summary": "Get list files of equipement",
        "tags": ["Geographic Context"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/File"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/IoTNetworkContext/list": {
      "get": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "Return list of IoTNetwork",
        "summary": "Gets a list of IoTNetwork",
        "tags": ["IoTNetwork & Time Series"],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/IoTNetwork"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/IoTNetworkContext/{id}/tree": {
      "get": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "Return tree of IoTNetwork",
        "summary": "Get a tree IoTNetwork by ID",
        "tags": ["IoTNetwork & Time Series"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/IoTNetworkTree"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/IoTNetworkContext/{id}/nodeTypeList": {
      "get": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "Return node type list of IoTNetwork",
        "summary": "Get type list in IoTNetwork with given ID",
        "tags": ["IoTNetwork & Time Series"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/IoTNetworkNodeTypeList"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/IoTNetworkContext/create": {
      "post": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "create network context",
        "summary": "create network context",
        "tags": ["IoTNetwork & Time Series"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["configNetworkContext"],
                "properties": {
                  "contextName": {
                    "type": "string"
                  },
                  "networkName": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Create Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/IoTNetworkContext/{id}/update": {
      "put": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "update the IoTNetwork",
        "summary": "update the IoTNetwork",
        "tags": ["IoTNetwork & Time Series"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["newNameIoTNetwork"],
                "properties": {
                  "newNameIoTNetwork": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update Success"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/IoTNetworkContext/{id}/delete": {
      "delete": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "delete network context",
        "summary": "delete network context",
        "tags": ["IoTNetwork & Time Series"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/IoTNetworkContext/{IoTNetworkId}/node/{nodeId}/find": {
      "get": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "find a node in IoTNetwork",
        "summary": "find a node in IoTNetwork",
        "tags": ["IoTNetwork & Time Series"],
        "parameters": [
          {
            "in": "path",
            "name": "IoTNetworkId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "nodeId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/IoTNetwork"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/IoTNetworkContext/{IoTNetworkId}/node/{nodeId}/read": {
      "get": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "read a node in IoTNetwork",
        "summary": "read a node in IoTNetwork",
        "tags": ["IoTNetwork & Time Series"],
        "parameters": [
          {
            "in": "path",
            "name": "IoTNetworkId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "nodeId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/IoTNetwork"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/Network/list": {
      "get": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "Return list of Network",
        "summary": "Gets a list of Network",
        "tags": ["IoTNetwork & Time Series"],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/IoTNetwork"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/Network/create": {
      "post": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "create Network",
        "summary": "create Network",
        "tags": ["IoTNetwork & Time Series"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "IoTNetworkContext_DynamicId",
                  "NetworkName",
                  "NetworkTypeName"
                ],
                "properties": {
                  "IoTNetworkContext_DynamicId": {
                    "type": "string"
                  },
                  "NetworkName": {
                    "type": "string"
                  },
                  "NetworkTypeName": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Create Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/Network/{id}/delete": {
      "delete": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "delete network",
        "summary": "delete network",
        "tags": ["IoTNetwork & Time Series"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/Network/{id}/update": {
      "put": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "update the Network",
        "summary": "update the Network",
        "tags": ["IoTNetwork & Time Series"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["newNameNetwork"],
                "properties": {
                  "newNameNetwork": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update Success"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/Network/{id}/device_list": {
      "get": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "Return list of device",
        "summary": "Gets a list of device",
        "tags": ["IoTNetwork & Time Series"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/IoTNetwork"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/device/create": {
      "post": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "create device",
        "summary": "create device",
        "tags": ["IoTNetwork & Time Series"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["configDevice"],
                "properties": {
                  "networkDynamicId": {
                    "type": "number",
                    "description": "optional"
                  },
                  "name": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Create Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/device/{id}/delete": {
      "delete": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "delete device",
        "summary": "delete device",
        "tags": ["IoTNetwork & Time Series"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/device/{id}/update": {
      "put": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "update the device",
        "summary": "update the device",
        "tags": ["IoTNetwork & Time Series"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["newNameNetwork"],
                "properties": {
                  "newNameNetwork": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update Success"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/device/{id}/endpoint_list": {
      "get": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "Return list of endpoint",
        "summary": "Gets a list of endpoint",
        "tags": ["IoTNetwork & Time Series"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/IoTNetwork"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/endpoint/create": {
      "post": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "create endpoint",
        "summary": "create endpoint",
        "tags": ["IoTNetwork & Time Series"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["deviceDynamicId", "name", "type", "Unit"],
                "properties": {
                  "deviceDynamicId": {
                    "type": "number"
                  },
                  "name": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  },
                  "Unit": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Create Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/endpoint/{id}/delete": {
      "delete": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "delete endpoint",
        "summary": "delete endpoint",
        "tags": ["IoTNetwork & Time Series"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/endpoint/{id}/attributsList": {
      "get": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "Returns list of attributs of endpoint",
        "summary": "Get list of attributs of endpoint",
        "tags": ["IoTNetwork & Time Series"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/EndPointNodeAttribut"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/endpoint/{id}/read": {
      "get": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "read the current value of endpoint",
        "summary": "read the current value of endpoint",
        "tags": ["IoTNetwork & Time Series"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/CurrentValue"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/endpoint/{id}/update": {
      "put": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "update the current value of endpoint",
        "summary": "update the current value of endpoint",
        "tags": ["IoTNetwork & Time Series"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["newValue"],
                "properties": {
                  "newValue": {
                    "type": "number"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/NewValue"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/endpoint/{id}/timeSeries/insert": {
      "post": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "insert new value",
        "summary": "insert new value",
        "tags": ["IoTNetwork & Time Series"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["newValue", "date"],
                "properties": {
                  "newValue": {
                    "type": "number"
                  },
                  "date": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Create Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/endpoint/{id}/timeSeries/push": {
      "post": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "push new value",
        "summary": "push new value",
        "tags": ["IoTNetwork & Time Series"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["newValue"],
                "properties": {
                  "newValue": {
                    "type": "number"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Create Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/endpoint/{id}/timeSeries/read/{begin}/{end}": {
      "get": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "get time series",
        "summary": "get time series",
        "tags": ["IoTNetwork & Time Series"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "begin",
            "description": "Date Format is DD/MM/YYYY hh:mm:ss or DD-MM-YYYY HH:mm:ss",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "end",
            "description": "Date Format is DD/MM/YYYY hh:mm:ss or DD-MM-YYYY hh:mm:ss",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/Timeserie"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/endpoint/{id}/timeSeries/readCurrentDay": {
      "get": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "get time series of current day",
        "summary": "get time series of current day",
        "tags": ["IoTNetwork & Time Series"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/Timeserie"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/endpoint/{id}/timeSeries/readCurrentMonth": {
      "get": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "get time series of month",
        "summary": "get time series of month",
        "tags": ["IoTNetwork & Time Series"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/Timeserie"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/endpoint/{id}/timeSeries/readCurrentWeek": {
      "get": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "get time series of week",
        "summary": "get time series of week",
        "tags": ["IoTNetwork & Time Series"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/Timeserie"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/endpoint/{id}/timeSeries/readCurrentYear": {
      "get": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "get time series of current year",
        "summary": "get time series of current year",
        "tags": ["IoTNetwork & Time Series"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/Timeserie"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/endpoint/{id}/timeSeries/readFromLast24H": {
      "get": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "get time series",
        "summary": "get time series",
        "tags": ["IoTNetwork & Time Series"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/Timeserie"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/workflow/list": {
      "get": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "Return list of workflows",
        "summary": "Gets a list of workflows",
        "tags": ["Workflow & ticket"],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Workflow"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/workflow/{id}/tree": {
      "get": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "Return tree of workflow",
        "summary": "Get a tree workflow by ID",
        "tags": ["Workflow & ticket"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/ContextTree"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/workflow/create": {
      "post": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "create a workflow",
        "summary": "create a workflow",
        "tags": ["Workflow & ticket"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["nameWorkflow"],
                "properties": {
                  "nameWorkflow": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Create Successfully"
          },
          "400": {
            "description": "create not Successfully"
          }
        }
      }
    },
    "/api/v1/workflow/{id}/read": {
      "get": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "read a workflow",
        "summary": "read a workflow",
        "tags": ["Workflow & ticket"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/Workflow"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/workflow/{id}/update": {
      "put": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "update the workflow",
        "summary": "update the workflow",
        "tags": ["Workflow & ticket"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["newNameWorkflow"],
                "properties": {
                  "newNameWorkflow": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/workflow/{id}/delete": {
      "delete": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "Delete a workflow",
        "summary": "delete an workflow",
        "tags": ["Workflow & ticket"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/workflow/{id}/nodeTypeList": {
      "get": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "Return node type list of workflow",
        "summary": "Get type list in workflow with given ID",
        "tags": ["Workflow & ticket"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/WorkflowNodeTypeList"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/workflow/{workflowId}/node/{nodeId}/find": {
      "get": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "find a node in workflow",
        "summary": "find a node in workflow",
        "tags": ["Workflow & ticket"],
        "parameters": [
          {
            "in": "path",
            "name": "workflowId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "nodeId",
            "description": "use the Static ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/Workflow"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/workflow/{workflowId}/node/{nodeId}/read": {
      "get": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "read a node in workflow",
        "summary": "read a node in workflow",
        "tags": ["Workflow & ticket"],
        "parameters": [
          {
            "in": "path",
            "name": "workflowId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "nodeId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/Workflow"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/workflow/{id}/processList": {
      "get": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "Returns list of process",
        "summary": "Get list of process",
        "tags": ["Workflow & ticket"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Process"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/workflow/{id}/create_process": {
      "post": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "create a Process",
        "summary": "create a Process",
        "tags": ["Workflow & ticket"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["nameProcess"],
                "properties": {
                  "nameProcess": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Create Successfully"
          },
          "400": {
            "description": "create not Successfully"
          }
        }
      }
    },
    "/api/v1/workflow/{workflowId}/process/{processId}/delete_process": {
      "delete": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "Delete a process",
        "summary": "delete an process",
        "tags": ["Workflow & ticket"],
        "parameters": [
          {
            "in": "path",
            "name": "workflowId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "processId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/workflow/{workflowId}/process/{processId}/update": {
      "put": {
        "description": "update the process",
        "summary": "update the process",
        "tags": ["Workflow & ticket"],
        "parameters": [
          {
            "in": "path",
            "name": "workflowId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "processId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["newNameProcess"],
                "properties": {
                  "newNameProcess": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/workflow/{workflowId}/process/{processId}/stepList": {
      "get": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "Returns list of steps",
        "summary": "Get list of steps",
        "tags": ["Workflow & ticket"],
        "parameters": [
          {
            "in": "path",
            "name": "workflowId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "processId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Step"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/workflow/{id}/create_step": {
      "post": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "add a Step",
        "summary": "add a Step",
        "tags": ["Workflow & ticket"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["processDynamicId", "name", "color", "order"],
                "properties": {
                  "processDynamicId": {
                    "type": "number"
                  },
                  "name": {
                    "type": "string"
                  },
                  "color": {
                    "type": "string"
                  },
                  "order": {
                    "type": "number"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Add Successfully"
          },
          "400": {
            "description": "Add not Successfully"
          }
        }
      }
    },
    "/api/v1/workflow/{workflowId}/process/{processId}/step/{stepId}/delete_step": {
      "delete": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "Delete a step",
        "summary": "delete an step",
        "tags": ["Workflow & ticket"],
        "parameters": [
          {
            "in": "path",
            "name": "workflowId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "processId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "stepId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/workflow/{workflowId}/process/{processId}/step/{stepId}/update_step": {
      "put": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "update the step",
        "summary": "update the step",
        "tags": ["Workflow & ticket"],
        "parameters": [
          {
            "in": "path",
            "name": "workflowId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "processId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "stepId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["newNameStep", "newColor"],
                "properties": {
                  "newNameStep": {
                    "type": "string"
                  },
                  "newColor": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/ticket/create_ticket": {
      "post": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "add a Ticket",
        "summary": "add a Ticket",
        "tags": ["Workflow & ticket"],
        "requestBody": {
          "description": "For the two parameters *workflow* and *process* you can browse it either by putting the dynamicId or the name",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "workflow",
                  "process",
                  "nodeDynamicId",
                  "name",
                  "priority",
                  "description",
                  "imageString"
                ],
                "properties": {
                  "workflow": {
                    "type": "string"
                  },
                  "process": {
                    "type": "string"
                  },
                  "nodeDynamicId": {
                    "type": "number"
                  },
                  "name": {
                    "type": "string"
                  },
                  "priority": {
                    "type": "number"
                  },
                  "description": {
                    "type": "string"
                  },
                  "images": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string"
                        },
                        "value": {
                          "type": "string"
                        },
                        "comments": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/Ticket"
                }
              }
            }
          },
          "400": {
            "description": "Add not Successfully"
          }
        }
      }
    },
    "/api/v1/ticket/{ticketId}/read_details": {
      "get": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "Return ticket",
        "summary": "Get ticket",
        "tags": ["Workflow & ticket"],
        "parameters": [
          {
            "in": "path",
            "name": "ticketId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/TicketDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/ticket/{ticketId}/add_doc": {
      "post": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "Uploads a Doc",
        "summary": "Uploads a Doc",
        "tags": ["Workflow & ticket"],
        "parameters": [
          {
            "in": "path",
            "name": "ticketId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "file": {
                  "style": "form"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["workflowId"],
                "properties": {
                  "workflowId": {
                    "type": "number"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Add Successfully"
          },
          "400": {
            "description": "Add not Successfully"
          }
        }
      }
    },
    "/api/v1/ticket/{ticketId}/add_note": {
      "post": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "add a note",
        "summary": "add a note",
        "tags": ["Workflow & ticket"],
        "parameters": [
          {
            "in": "path",
            "name": "ticketId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["note"],
                "properties": {
                  "note": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Add Successfully"
          },
          "400": {
            "description": "Add not Successfully"
          }
        }
      }
    },
    "/api/v1/ticket/{ticketId}/change_node": {
      "put": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "change a node of Ticket",
        "summary": "change a node of Ticket",
        "tags": ["Workflow & ticket"],
        "parameters": [
          {
            "in": "path",
            "name": "ticketId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["nodeDynamicId"],
                "properties": {
                  "nodeDynamicId": {
                    "type": "number"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "change node Successfully"
          },
          "400": {
            "description": "change node not Successfully"
          }
        }
      }
    },
    "/api/v1/ticket/{ticketId}/change_process": {
      "put": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "change a process of Ticket",
        "summary": "change a process of Ticket",
        "tags": ["Workflow & ticket"],
        "parameters": [
          {
            "in": "path",
            "name": "ticketId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["processDynamicId"],
                "properties": {
                  "processDynamicId": {
                    "type": "number"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "change process Successfully"
          },
          "400": {
            "description": "change process not Successfully"
          }
        }
      }
    },
    "/api/v1/ticket/{ticketId}/change_workflow": {
      "put": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "change a wokflow of Ticket",
        "summary": "change a wokflow of Ticket",
        "tags": ["Workflow & ticket"],
        "parameters": [
          {
            "in": "path",
            "name": "ticketId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["workflowDynamicId", "processDynamicId"],
                "properties": {
                  "workflowDynamicId": {
                    "type": "number"
                  },
                  "processDynamicId": {
                    "type": "number"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "change workflow Successfully"
          },
          "400": {
            "description": "change workflow not Successfully"
          }
        }
      }
    },
    "/api/v1/ticket/{ticketId}/find_entity": {
      "get": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "Return entity of ticket",
        "summary": "Get entity of ticket",
        "tags": ["Workflow & ticket"],
        "parameters": [
          {
            "in": "path",
            "name": "ticketId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/BasicNode"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/ticket/{ticketId}/next_step": {
      "post": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "move a Ticket",
        "summary": "move a Ticket",
        "tags": ["Workflow & ticket"],
        "parameters": [
          {
            "in": "path",
            "name": "ticketId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["workflowDynamicId", "processDynamicId"],
                "properties": {
                  "workflowDynamicId": {
                    "type": "number"
                  },
                  "processDynamicId": {
                    "type": "number"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "move to next step Successfully"
          },
          "400": {
            "description": "move to next step not Successfully"
          }
        }
      }
    },
    "/api/v1/ticket/{ticketId}/previous_step": {
      "post": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "move a Ticket",
        "summary": "move a Ticket",
        "tags": ["Workflow & ticket"],
        "parameters": [
          {
            "in": "path",
            "name": "ticketId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["workflowDynamicId", "processDynamicId"],
                "properties": {
                  "workflowDynamicId": {
                    "type": "number"
                  },
                  "processDynamicId": {
                    "type": "number"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "move to previous step Successfully"
          },
          "400": {
            "description": "move to previous step not Successfully"
          }
        }
      }
    },
    "/api/v1/ticket/{ticketId}/archive": {
      "post": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "archive a Ticket",
        "summary": "archive a Ticket",
        "tags": ["Workflow & ticket"],
        "parameters": [
          {
            "in": "path",
            "name": "ticketId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["workflowDynamicId", "processDynamicId"],
                "properties": {
                  "workflowDynamicId": {
                    "type": "number"
                  },
                  "processDynamicId": {
                    "type": "number"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Archive Successfully"
          },
          "400": {
            "description": "Archive not Successfully"
          }
        }
      }
    },
    "/api/v1/ticket/{ticketId}/unarchive": {
      "post": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "unarchive a Ticket",
        "summary": "unarchive a Ticket",
        "tags": ["Workflow & ticket"],
        "parameters": [
          {
            "in": "path",
            "name": "ticketId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["workflowDynamicId", "processDynamicId"],
                "properties": {
                  "workflowDynamicId": {
                    "type": "number"
                  },
                  "processDynamicId": {
                    "type": "number"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Unarchive Successfully"
          },
          "400": {
            "description": "Unarchive not Successfully"
          }
        }
      }
    },
    "/api/v1/eventContext/list": {
      "get": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "Return list of event contexts",
        "summary": "Gets a list of event contexts",
        "tags": ["Calendar & Event"],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ContextEvent"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/eventContext/{id}/tree": {
      "get": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "Return tree of event context",
        "summary": "Get a tree event context by ID",
        "tags": ["Calendar & Event"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/ContextTree"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/eventContext/create": {
      "post": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "create event context",
        "summary": "create event context",
        "tags": ["Calendar & Event"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["configEventContext"],
                "properties": {
                  "contextName": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Create Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/eventContext/{id}/category_list": {
      "get": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "Return list of event category",
        "summary": "Gets a list of event category",
        "tags": ["Calendar & Event"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/CategoryEvent"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/eventContext/{id}/create_category": {
      "post": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "create event category",
        "summary": "create event category",
        "tags": ["Calendar & Event"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["configEventCategory"],
                "properties": {
                  "categoryName": {
                    "type": "string"
                  },
                  "icon": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Create Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/eventContext/{ContextId}/eventCategory/{CategoryId}/create_group": {
      "post": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "create event group",
        "summary": "create event group",
        "tags": ["Calendar & Event"],
        "parameters": [
          {
            "in": "path",
            "name": "ContextId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "CategoryId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["configEventGroup"],
                "properties": {
                  "groupName": {
                    "type": "string"
                  },
                  "color": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Create Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/eventContext/{ContextId}/eventCategory/{CategoryId}/group_list": {
      "get": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "Return list of event group",
        "summary": "Gets a list of event group",
        "tags": ["Calendar & Event"],
        "parameters": [
          {
            "in": "path",
            "name": "ContextId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "CategoryId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/GroupEvent"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/event/create": {
      "post": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "create event",
        "summary": "create event",
        "tags": ["Calendar & Event"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "contextId",
                  "categoryDynamicId",
                  "groupDynamicId",
                  "nodeDynamicId",
                  "startDate",
                  "endDate",
                  "description",
                  "repeat",
                  "repeatEnd",
                  "count",
                  "period"
                ],
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "contextId": {
                    "type": "number"
                  },
                  "categoryDynamicId": {
                    "type": "number"
                  },
                  "groupDynamicId": {
                    "type": "number"
                  },
                  "nodeDynamicId": {
                    "type": "number"
                  },
                  "startDate": {
                    "type": "string"
                  },
                  "endDate": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "repeat": {
                    "type": "boolean"
                  },
                  "repeatEnd": {
                    "type": "number"
                  },
                  "count": {
                    "type": "number"
                  },
                  "period": {
                    "type": "number"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/event/{eventId}/read": {
      "get": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "Return event",
        "summary": "Get event",
        "tags": ["Calendar & Event"],
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/Event"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/event/{eventId}/update": {
      "put": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "update event",
        "summary": "update event",
        "tags": ["Calendar & Event"],
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "contextId",
                  "name",
                  "repeat",
                  "startDate",
                  "endDate"
                ],
                "properties": {
                  "contextId": {
                    "type": "integer"
                  },
                  "name": {
                    "type": "string"
                  },
                  "startDate": {
                    "type": "string"
                  },
                  "endDate": {
                    "type": "string"
                  },
                  "repeat": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/event/{eventId}/delete": {
      "delete": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "delete event",
        "summary": "delete event",
        "tags": ["Calendar & Event"],
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/groupContext/list": {
      "get": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "Return list of contexts",
        "summary": "Gets a list of contexts",
        "tags": ["Group Context"],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Context"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/groupContext/{id}/tree": {
      "get": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "Return tree of context",
        "summary": "Get a tree context by ID",
        "tags": ["Group Context"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/ContextTree"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/groupContext/type_list": {
      "get": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "Return list of type of groupContext",
        "summary": "Gets a list of type of groupContext",
        "tags": ["Group Context"],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/TypeListGroupContext"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/groupContext/contextsOfType/{type}": {
      "get": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "Return nodes of type in context",
        "summary": "Gets a nodes of type with given ID context and Type",
        "tags": ["Group Context"],
        "parameters": [
          {
            "in": "path",
            "name": "type",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ContextNodeofTypes"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/groupContext/create": {
      "post": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "create group context",
        "summary": "create group context",
        "tags": ["Group Context"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["contextName", "childrenType"],
                "properties": {
                  "contextName": {
                    "type": "string"
                  },
                  "childrenType": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Create Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/groupContext/{id}/read": {
      "get": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "read group Context",
        "summary": "Gets group Context",
        "tags": ["Group Context"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/Context"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/groupContext/{id}/update": {
      "put": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "update group context",
        "summary": "update group context",
        "tags": ["Group Context"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["newContextName"],
                "properties": {
                  "newContextName": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/groupContext/{id}/delete": {
      "delete": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "delete groupContext",
        "summary": "delete groupContext",
        "tags": ["Group Context"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/groupeContext/{id}/category_list": {
      "get": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "Return list of category",
        "summary": "Gets a list of category",
        "tags": ["Group Context"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/CategoryEvent"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/groupContext/{id}/create_category": {
      "post": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "create category",
        "summary": "create category",
        "tags": ["Group Context"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["categoryName", "iconName"],
                "properties": {
                  "categoryName": {
                    "type": "string"
                  },
                  "iconName": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Create Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/groupContext/{contextId}/category/{categoryId}/read": {
      "get": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "read category",
        "summary": "Get category",
        "tags": ["Group Context"],
        "parameters": [
          {
            "in": "path",
            "name": "contextId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "categoryId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/BasicNode"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/groupContext/{contextId}/category/{categoryId}/update": {
      "put": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "update category",
        "summary": "update category",
        "tags": ["Group Context"],
        "parameters": [
          {
            "in": "path",
            "name": "contextId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "categoryId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["newNameCategory", "newNameIcon"],
                "properties": {
                  "newNameCategory": {
                    "type": "string"
                  },
                  "newNameIcon": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/groupContext/{contextId}/category/{categoryId}/delete": {
      "delete": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "delete category",
        "summary": "delete category",
        "tags": ["Group Context"],
        "parameters": [
          {
            "in": "path",
            "name": "contextId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "categoryId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/groupeContext/{contextId}/category/{categoryId}/group_list": {
      "get": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "Return list of group",
        "summary": "Gets a list of group",
        "tags": ["Group Context"],
        "parameters": [
          {
            "in": "path",
            "name": "contextId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "categoryId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/CategoryEvent"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/groupeContext/{contextId}/category/{categoryId}/create_group": {
      "post": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "create group",
        "summary": "create group",
        "tags": ["Group Context"],
        "parameters": [
          {
            "in": "path",
            "name": "contextId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "categoryId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["groupName", "colorName"],
                "properties": {
                  "groupName": {
                    "type": "string"
                  },
                  "colorName": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Create Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/groupContext/{contextId}/category/{categoryId}/group/{groupId}/read": {
      "get": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "read group",
        "summary": "Get group",
        "tags": ["Group Context"],
        "parameters": [
          {
            "in": "path",
            "name": "contextId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "categoryId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "groupId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/BasicNode"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/groupContext/{contextId}/category/{categoryId}/group/{groupId}/update": {
      "put": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "update group",
        "summary": "update group",
        "tags": ["Group Context"],
        "parameters": [
          {
            "in": "path",
            "name": "contextId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "categoryId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "groupId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["newNameGroup", "newNameColor"],
                "properties": {
                  "newNameGroup": {
                    "type": "string"
                  },
                  "newNameColor": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/groupContext/{contextId}/category/{categoryId}/group/{groupId}/delete": {
      "delete": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "delete group",
        "summary": "delete group",
        "tags": ["Group Context"],
        "parameters": [
          {
            "in": "path",
            "name": "contextId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "categoryId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "groupId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/roomsGroup/list": {
      "get": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "Return list of contexts rooms group",
        "summary": "Gets a list of contexts rooms group",
        "tags": ["Rooms Group"],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Context"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/roomsGroup/{id}/tree": {
      "get": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "Return tree of context roomsGroup",
        "summary": "Get a tree context by ID",
        "tags": ["Rooms Group"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/ContextTree"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/roomsGroup/create": {
      "post": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "create Rooms Group context",
        "summary": "create Rooms Group context",
        "tags": ["Rooms Group"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["contextName"],
                "properties": {
                  "contextName": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Create Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/roomsGroup/{id}/read": {
      "get": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "read group Context roomsGroup",
        "summary": "Gets group Context roomsGroup",
        "tags": ["Rooms Group"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/BasicNode"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/roomsGroup/{id}/update": {
      "put": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "update group context roomsGroup",
        "summary": "update group context roomsGroup",
        "tags": ["Rooms Group"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["newGroupRoomContextName"],
                "properties": {
                  "newGroupRoomContextName": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/roomsGroup/{id}/delete": {
      "delete": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "delete roomsGroup context",
        "summary": "delete roomsGroup context",
        "tags": ["Rooms Group"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/roomsGroup/{id}/category_list": {
      "get": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "Return list of category roomsGroup",
        "summary": "Gets a list of category roomsGroup",
        "tags": ["Rooms Group"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/CategoryEvent"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/roomsGroup/{id}/create_category": {
      "post": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "create category Room group",
        "summary": "create category Room group",
        "tags": ["Rooms Group"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["categoryName", "iconName"],
                "properties": {
                  "categoryName": {
                    "type": "string"
                  },
                  "iconName": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Create Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/roomsGroup/{contextId}/category/{categoryId}/read": {
      "get": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "read category roomsGroup",
        "summary": "Get category roomsGroup",
        "tags": ["Rooms Group"],
        "parameters": [
          {
            "in": "path",
            "name": "contextId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "categoryId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/BasicNode"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/roomsGroup/{contextId}/category/{categoryId}/update": {
      "put": {
        "description": "update category roomsGroup",
        "summary": "update category roomsGroup",
        "tags": ["Rooms Group"],
        "parameters": [
          {
            "in": "path",
            "name": "contextId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "categoryId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["newNameCategory", "newNameIcon"],
                "properties": {
                  "newNameCategory": {
                    "type": "string"
                  },
                  "newNameIcon": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/roomsGroup/{contextId}/category/{categoryId}/delete": {
      "delete": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "delete category",
        "summary": "delete category",
        "tags": ["Rooms Group"],
        "parameters": [
          {
            "in": "path",
            "name": "contextId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "categoryId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/roomsGroup/{contextId}/category/{categoryId}/group_list": {
      "get": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "Return list of group roomsGroup",
        "summary": "Gets a list of group roomsGroup",
        "tags": ["Rooms Group"],
        "parameters": [
          {
            "in": "path",
            "name": "contextId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "categoryId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/CategoryEvent"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/roomsGroup/{contextId}/category/{categoryId}/create_group": {
      "post": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "create group roomsGroup",
        "summary": "create group roomsGroup",
        "tags": ["Rooms Group"],
        "parameters": [
          {
            "in": "path",
            "name": "contextId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "categoryId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["groupName", "colorName"],
                "properties": {
                  "groupName": {
                    "type": "string"
                  },
                  "colorName": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Create Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/roomsGroup/{contextId}/category/{categoryId}/group/{groupId}/read": {
      "get": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "read group roomsGroup",
        "summary": "Get group roomsGroup",
        "tags": ["Rooms Group"],
        "parameters": [
          {
            "in": "path",
            "name": "contextId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "categoryId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "groupId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/BasicNode"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/roomsGroup/{contextId}/category/{categoryId}/group/{groupId}/update": {
      "put": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "update group roomsGroup",
        "summary": "update group roomsGroup",
        "tags": ["Rooms Group"],
        "parameters": [
          {
            "in": "path",
            "name": "contextId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "categoryId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "groupId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["newNameGroup", "newNameColor"],
                "properties": {
                  "newNameGroup": {
                    "type": "string"
                  },
                  "newNameColor": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/roomsGroup/{contextId}/category/{categoryId}/group/{groupId}/delete": {
      "delete": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "delete group roomsGroup",
        "summary": "delete group roomsGroup",
        "tags": ["Rooms Group"],
        "parameters": [
          {
            "in": "path",
            "name": "contextId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "categoryId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "groupId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/equipementsGroup/list": {
      "get": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "Return list of contexts equipements Group",
        "summary": "Gets a list of contexts equipements Group",
        "tags": ["Equipements Group"],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Context"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/equipementsGroup/{id}/tree": {
      "get": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "Return tree of context equipements Group",
        "summary": "Get a tree context by ID",
        "tags": ["Equipements Group"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/ContextTree"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/equipementsGroup/create": {
      "post": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "create equipements Group context",
        "summary": "create equipements Group context",
        "tags": ["Equipements Group"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["contextName"],
                "properties": {
                  "contextName": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Create Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/equipementsGroup/{id}/read": {
      "get": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "read group equipements Group",
        "summary": "Gets group equipements Group",
        "tags": ["Equipements Group"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/Context"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/equipementsGroup/{id}/update": {
      "put": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "update context equipements Group",
        "summary": "update context equipements Group",
        "tags": ["Equipements Group"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["newGroupEquipementContextName"],
                "properties": {
                  "newGroupEquipementContextName": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/equipementsGroup/{id}/delete": {
      "delete": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "delete equipements Group context",
        "summary": "delete equipements Group context",
        "tags": ["Equipements Group"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/equipementsGroup/{id}/category_list": {
      "get": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "Return list of category equipements Group",
        "summary": "Gets a list of category equipements Group",
        "tags": ["Equipements Group"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/CategoryEvent"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/equipementsGroup/{id}/create_category": {
      "post": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "create category equipements group",
        "summary": "create category equipements group",
        "tags": ["Equipements Group"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["categoryName", "iconName"],
                "properties": {
                  "categoryName": {
                    "type": "string"
                  },
                  "iconName": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Create Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/equipementsGroup/{contextId}/category/{categoryId}/read": {
      "get": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "read category equipements Group",
        "summary": "Get category equipements Group",
        "tags": ["Equipements Group"],
        "parameters": [
          {
            "in": "path",
            "name": "contextId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "categoryId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/BasicNode"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/equipementsGroup/{contextId}/category/{categoryId}/update": {
      "put": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "update category equipements Group",
        "summary": "update category equipements Group",
        "tags": ["Equipements Group"],
        "parameters": [
          {
            "in": "path",
            "name": "contextId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "categoryId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["newNameCategory", "newNameIcon"],
                "properties": {
                  "newNameCategory": {
                    "type": "string"
                  },
                  "newNameIcon": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/equipementsGroup/{contextId}/category/{categoryId}/delete": {
      "delete": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "delete category",
        "summary": "delete category",
        "tags": ["Equipements Group"],
        "parameters": [
          {
            "in": "path",
            "name": "contextId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "categoryId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/equipementsGroup/{contextId}/category/{categoryId}/group_list": {
      "get": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "Return list of group equipements Group",
        "summary": "Gets a list of group equipements Group",
        "tags": ["Equipements Group"],
        "parameters": [
          {
            "in": "path",
            "name": "contextId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "categoryId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/CategoryEvent"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/equipementsGroup/{contextId}/category/{categoryId}/create_group": {
      "post": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "create group equipements Group",
        "summary": "create group equipements Group",
        "tags": ["Equipements Group"],
        "parameters": [
          {
            "in": "path",
            "name": "contextId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "categoryId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["groupName", "colorName"],
                "properties": {
                  "groupName": {
                    "type": "string"
                  },
                  "colorName": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Create Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/equipementsGroup/{contextId}/category/{categoryId}/group/{groupId}/read": {
      "get": {
        "description": "read group equipements Group",
        "summary": "Get group equipements Group",
        "tags": ["Equipements Group"],
        "parameters": [
          {
            "in": "path",
            "name": "contextId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "categoryId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "groupId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/BasicNode"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/equipementsGroup/{contextId}/category/{categoryId}/group/{groupId}/update": {
      "put": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "update group equipements Group",
        "summary": "update group equipements Group",
        "tags": ["Equipements Group"],
        "parameters": [
          {
            "in": "path",
            "name": "contextId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64."
            }
          },
          {
            "in": "path",
            "name": "categoryId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "groupId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["newNameGroup", "newNameColor"],
                "properties": {
                  "newNameGroup": {
                    "type": "string"
                  },
                  "newNameColor": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/equipementsGroup/{contextId}/category/{categoryId}/group/{groupId}/delete": {
      "delete": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "delete group equipements Group",
        "summary": "delete group equipements Group",
        "tags": ["Equipements Group"],
        "parameters": [
          {
            "in": "path",
            "name": "contextId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "categoryId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "groupId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/endPointsGroup/list": {
      "get": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "Return list of contexts endPoints Group",
        "summary": "Gets a list of contexts endPoints Group",
        "tags": ["EndPoints Group"],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Context"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/endPointsGroup/{id}/tree": {
      "get": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "Return tree of context endPoints Group",
        "summary": "Get a tree context by ID",
        "tags": ["EndPoints Group"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/ContextTree"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/endPointsGroup/create": {
      "post": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "create endPoints Group context",
        "summary": "create endPoints Group context",
        "tags": ["EndPoints Group"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["contextName"],
                "properties": {
                  "contextName": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Create Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/endPointsGroup/{id}/read": {
      "get": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "read group endPoints Group",
        "summary": "Gets group endPoints Group",
        "tags": ["EndPoints Group"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/Context"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/endPointsGroup/{id}/update": {
      "put": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "update context endPoints Group",
        "summary": "update context endPoints Group",
        "tags": ["EndPoints Group"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["newGroupEndpointContextName"],
                "properties": {
                  "newGroupEndpointContextName": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/endPointsGroup/{id}/delete": {
      "delete": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "delete endPoints Group context",
        "summary": "delete endPoints Group context",
        "tags": ["EndPoints Group"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/endPointsGroup/{id}/category_list": {
      "get": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "Return list of category endPoints Group",
        "summary": "Gets a list of category endPoints Group",
        "tags": ["EndPoints Group"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/CategoryEvent"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/endPointsGroup/{id}/create_category": {
      "post": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "create category endpoint group",
        "summary": "create category endpoint group",
        "tags": ["EndPoints Group"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["categoryName", "iconName"],
                "properties": {
                  "categoryName": {
                    "type": "string"
                  },
                  "iconName": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Create Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/endPointsGroup/{contextId}/category/{categoryId}/read": {
      "get": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "read category endPoints Group",
        "summary": "Get category endPoints Group",
        "tags": ["EndPoints Group"],
        "parameters": [
          {
            "in": "path",
            "name": "contextId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "categoryId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/BasicNode"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/endPointsGroup/{contextId}/category/{categoryId}/update": {
      "put": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "update category endPoints Group",
        "summary": "update category endPoints Group",
        "tags": ["EndPoints Group"],
        "parameters": [
          {
            "in": "path",
            "name": "contextId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "categoryId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["newNameCategory", "newNameIcon"],
                "properties": {
                  "newNameCategory": {
                    "type": "string"
                  },
                  "newNameIcon": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/endPointsGroup/{contextId}/category/{categoryId}/delete": {
      "delete": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "delete category",
        "summary": "delete category",
        "tags": ["EndPoints Group"],
        "parameters": [
          {
            "in": "path",
            "name": "contextId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "categoryId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/endPointsGroup/{contextId}/category/{categoryId}/group_list": {
      "get": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "Return list of group endPoints Group",
        "summary": "Gets a list of group endPoints Group",
        "tags": ["EndPoints Group"],
        "parameters": [
          {
            "in": "path",
            "name": "contextId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "categoryId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/CategoryEvent"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/endPointsGroup/{contextId}/category/{categoryId}/create_group": {
      "post": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "create group endPoints Group",
        "summary": "create group endPoints Group",
        "tags": ["EndPoints Group"],
        "parameters": [
          {
            "in": "path",
            "name": "contextId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "categoryId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["groupName", "colorName"],
                "properties": {
                  "groupName": {
                    "type": "string"
                  },
                  "colorName": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Create Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/endPointsGroup/{contextId}/category/{categoryId}/group/{groupId}/read": {
      "get": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "read group endPoints Group",
        "summary": "Get group endPoints Group",
        "tags": ["EndPoints Group"],
        "parameters": [
          {
            "in": "path",
            "name": "contextId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "categoryId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "groupId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/BasicNode"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/endPointsGroup/{contextId}/category/{categoryId}/group/{groupId}/update": {
      "put": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "update group endPoints Group",
        "summary": "update group endPoints Group",
        "tags": ["EndPoints Group"],
        "parameters": [
          {
            "in": "path",
            "name": "contextId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "categoryId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "groupId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["newNameGroup", "newNameColor"],
                "properties": {
                  "newNameGroup": {
                    "type": "string"
                  },
                  "newNameColor": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/endPointsGroup/{contextId}/category/{categoryId}/group/{groupId}/delete": {
      "delete": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "delete group endPoints Group",
        "summary": "delete group endPoints Group",
        "tags": ["EndPoints Group"],
        "parameters": [
          {
            "in": "path",
            "name": "contextId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "categoryId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "groupId",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete Successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/BIM/getBimObjectsInfo": {
      "post": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "Retrun the list of getBimObjectsInfo",
        "summary": "Get getBimObjectsInfo",
        "tags": ["BIM"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "bimFileId": {
                    "description": "serverId or staticId of the BimFile",
                    "oneOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "integer"
                      }
                    ]
                  },
                  "bimObjects": {
                    "description": "dbIds in the viewer",
                    "type": "array",
                    "items": {
                      "type": "integer"
                    }
                  }
                },
                "required": ["bimFileId", "bimObjects"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Array of getBimObjectsInfo",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/BimObjectsInfo"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/BIM/scene/default": {
      "get": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "Retrun the default scene with it's items",
        "summary": "Get the default scene with it's items",
        "tags": ["BIM"],
        "responses": {
          "200": {
            "description": "scene",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/SceneInfo"
                }
              }
            }
          },
          "400": {
            "description": "scene not found"
          },
          "500": {
            "description": "internal error"
          }
        }
      }
    },
    "/api/v1/BIM/scene/{id}": {
      "get": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "Retrun the target scene with it's items",
        "summary": "Get the target scene with it's items",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "dynamic or static id",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            }
          }
        ],
        "tags": ["BIM"],
        "responses": {
          "200": {
            "description": "scene",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/SceneInfo"
                }
              }
            }
          },
          "400": {
            "description": "scene not found"
          },
          "500": {
            "description": "internal error"
          }
        }
      }
    },
    "/api/v1/BIM/scene/list": {
      "get": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "Retrun the list of scenes",
        "summary": "Get scenes of the list",
        "tags": ["BIM"],
        "responses": {
          "200": {
            "description": "Array of scenes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/SceneListReturn"
                }
              }
            }
          },
          "500": {
            "description": "internal error"
          }
        }
      }
    },
    "/BIM/file": {
      "get": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "route of the static bim files",
        "tags": ["BIM"],
        "responses": {
          "200": {
            "description": "the file"
          },
          "404": {
            "description": "not found"
          }
        }
      }
    },
    "/api/v1/node/{id}/add_note": {
      "post": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "add a note",
        "summary": "add a note",
        "tags": ["Nodes"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["note"],
                "properties": {
                  "note": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Add Successfully"
          },
          "400": {
            "description": "Add not Successfully"
          }
        }
      }
    },
    "/api/v1/node/{id}/update_note": {
      "put": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "update a note",
        "summary": "update a note",
        "tags": ["Notes"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["note"],
                "properties": {
                  "note": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update Successfully"
          },
          "400": {
            "description": "Update not Successfully"
          }
        }
      }
    },
    "/api/v1/equipement/{id}/get_postion": {
      "get": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "Get equipement position",
        "summary": "Get equipement position",
        "tags": ["Geographic Context"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/Position"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/find_node_in_context": {
      "post": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "Find node object in a specific context",
        "summary": "Gets Node",
        "tags": ["Contexts/ontologies"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "optionSearchNodes",
                  "optionResult",
                  "context",
                  "array"
                ],
                "properties": {
                  "optionSearchNodes": {
                    "type": "string"
                  },
                  "optionResult": {
                    "type": "string"
                  },
                  "context": {
                    "type": "string"
                  },
                  "array": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/Node"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/analytics/room/{id}/status/{option}": {
      "get": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "Return status of room",
        "summary": "Get Return status of room",
        "tags": ["Analytics"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "option",
            "description": "choose an option among the three options, summary will give -note-the sum of tickets (part and equipment) by level of criticality-the sum of the alarms standard will give -Note -the list of tickets (part and equipment) with their name, note, -their workflow and their status -the list of alarms by equipment in the room detail will give  -Note -detailed list of tickets (part and equipment) -detailed list of alarms by equipment in the room",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Ticket"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/node/convert_base_64": {
      "post": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "Find node object in a specific context",
        "summary": "Gets Node",
        "tags": ["Nodes"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["imageString"],
                "properties": {
                  "imageString": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/Node"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/room/{id}/read_static_details": {
      "get": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "read static details of room",
        "summary": "Gets static details of room",
        "tags": ["Geographic Context"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/StaticDetailsRoom"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/ticket/{id}/event_list": {
      "post": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "Returns events of ticket",
        "summary": "Get list events of ticket",
        "tags": ["Workflow & ticket"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "you have 3 choices to fill in the \"period\" field   (*all* => to retrieve the entire list of events,   *today* => to retrieve today's events,   *week* = > to retrieve the events of the current week,   *dateInterval* or *undefined* to retrieve a precise date by filling in the \"startDate\" and \"endDate\" fields)",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["period"],
                "properties": {
                  "startDate": {
                    "type": "string"
                  },
                  "endDate": {
                    "type": "string"
                  },
                  "period": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Event"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/ticket/{id}/create_event": {
      "post": {
        "security": [
          {
            "OauthSecurity": ["read"]
          }
        ],
        "description": "create event of ticket",
        "summary": "create event of ticket",
        "tags": ["Workflow & ticket"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "use the dynamic ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "startDate",
                  "endDate",
                  "description",
                  "repeat",
                  "repeatEnd",
                  "count",
                  "period",
                  "user"
                ],
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "startDate": {
                    "type": "string"
                  },
                  "endDate": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "repeat": {
                    "type": "boolean"
                  },
                  "repeatEnd": {
                    "type": "number"
                  },
                  "count": {
                    "type": "number"
                  },
                  "period": {
                    "type": "number"
                  },
                  "user": {
                    "type": "object",
                    "required": ["userName", "email", "gsm"],
                    "properties": {
                      "userName": {
                        "type": "string"
                      },
                      "email": {
                        "type": "string"
                      },
                      "gsm": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/Event"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    }
  },
  "definitions": {
    "ContextTree": {
      "type": "object",
      "properties": {
        "dynamicId": {
          "type": "integer"
        },
        "staticId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "context": {
          "type": "string"
        },
        "children": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ContextTree"
          }
        }
      },
      "exemple": {
        "dynamicId": 377295296,
        "staticId": "SpinalContext-b61aca38-c262-56bd-9b3b-72fba07999a4-173a52a9bd8",
        "name": "Scenes",
        "type": "SpinalService",
        "context": "SpinalContext",
        "children": [
          {
            "dynamicId": 377301280,
            "staticId": "SpinalNode-c04c8302-ef21-7fa1-3435-8bf1ecd717b8-173a52a9bde",
            "name": "bim",
            "type": "scene",
            "children": []
          }
        ]
      }
    },
    "Context": {
      "type": "object",
      "properties": {
        "dynamicId": {
          "type": "integer"
        },
        "staticId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "ContextNodeofTypes": {
      "type": "object",
      "properties": {
        "dynamicId": {
          "type": "integer"
        },
        "staticId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "ContextNodeTypeList": {
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "Node": {
      "type": "object",
      "properties": {
        "dynamicId": {
          "type": "integer"
        },
        "staticId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "children_relation_list": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Relation"
          }
        }
      }
    },
    "Relation": {
      "type": "object",
      "properties": {
        "dynamicId": {
          "type": "integer"
        },
        "staticId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "children_number": {
          "type": "integer"
        }
      }
    },
    "EndPointNode": {
      "type": "object",
      "properties": {
        "dynamicId": {
          "type": "integer"
        },
        "staticId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "currentValue": {
          "type": "integer"
        }
      }
    },
    "CategoriesAttribute": {
      "type": "object",
      "properties": {
        "dynamicId": {
          "type": "integer"
        },
        "staticId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "NodeAttribut": {
      "type": "object",
      "properties": {
        "dynamicId": {
          "type": "integer"
        },
        "staticId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "attributs": {
          "type": "array",
          "items": {
            "anyOf": [
              {
                "$ref": "#/definitions/Attributs"
              }
            ]
          }
        }
      }
    },
    "Attributs": {
      "type": "object",
      "properties": {
        "label": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "date": {
          "type": "integer"
        },
        "type": {
          "type": "integer"
        },
        "unit": {
          "type": "integer"
        }
      }
    },
    "Building": {
      "type": "object",
      "properties": {
        "dynamicId": {
          "type": "integer"
        },
        "staticId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "adress": {
          "type": "string"
        },
        "area": {
          "type": "integer"
        }
      }
    },
    "Floor": {
      "type": "object",
      "properties": {
        "dynamicId": {
          "type": "integer"
        },
        "staticId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "FloorDetails": {
      "type": "object",
      "properties": {
        "area": {
          "type": "integer"
        },
        "dbIds": {
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      }
    },
    "Room": {
      "type": "object",
      "properties": {
        "dynamicId": {
          "type": "integer"
        },
        "staticId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "RoomDetails": {
      "type": "object",
      "properties": {
        "area": {
          "type": "integer"
        },
        "dbIds": {
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      }
    },
    "Equipement": {
      "type": "object",
      "properties": {
        "dynamicId": {
          "type": "integer"
        },
        "staticId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "bimFileId": {
          "type": "string"
        },
        "version": {
          "type": "number"
        },
        "externalId": {
          "type": "string"
        },
        "dbid": {
          "type": "string"
        }
      }
    },
    "EndPointRoom": {
      "type": "object",
      "properties": {
        "dynamicId": {
          "type": "integer"
        },
        "staticId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "currentValue": {
          "type": "integer"
        }
      }
    },
    "Note": {
      "type": "object",
      "properties": {
        "userName": {
          "type": "string"
        },
        "date": {
          "type": "integer"
        },
        "type": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "Position": {
      "type": "object",
      "properties": {
        "dynamicId": {
          "type": "integer"
        },
        "staticId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "info": {
          "type": "object",
          "properties": {
            "context": {
              "schema": {
                "$ref": "#/definitions/Context"
              }
            },
            "building": {
              "schema": {
                "$ref": "#/definitions/Building"
              }
            },
            "floor": {
              "schema": {
                "$ref": "#/definitions/Floor"
              }
            },
            "room": {
              "schema": {
                "$ref": "#/definitions/Room"
              }
            }
          }
        }
      }
    },
    "StaticDetailsRoom": {
      "type": "object",
      "properties": {
        "dynamicId": {
          "type": "integer"
        },
        "staticId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "attributs": {
          "type": "array",
          "items": {
            "schema": {
              "$ref": "#/definitions/Attributs"
            }
          }
        },
        "controlEndpoint": {
          "type": "object",
          "properties": {
            "profileName": {
              "type": "string"
            },
            "endpoints": {
              "type": "array",
              "items": {
                "schema": {
                  "$ref": "#/definitions/Room"
                }
              }
            }
          }
        },
        "bimObjects": {
          "type": "array",
          "items": {
            "schema": {
              "$ref": "#/definitions/Equipement"
            }
          }
        },
        "groupParents": {
          "type": "array",
          "items": {
            "schema": {
              "$ref": "#/definitions/Room"
            }
          }
        }
      }
    },
    "IoTNetwork": {
      "type": "object",
      "properties": {
        "dynamicId": {
          "type": "integer"
        },
        "staticId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "IoTNetworkTree": {
      "type": "object",
      "properties": {
        "dynamicId": {
          "type": "integer"
        },
        "staticId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "IoTNetwork": {
          "type": "string"
        },
        "children": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/IoTNetworkTree"
          }
        }
      },
      "exemple": {
        "dynamicId": 377295296,
        "staticId": "SpinalContext-b61aca38-c262-56bd-9b3b-72fba07999a4-173a52a9bd8",
        "name": "Scenes",
        "type": "SpinalService",
        "context": "SpinalContext",
        "children": [
          {
            "dynamicId": 377301280,
            "staticId": "SpinalNode-c04c8302-ef21-7fa1-3435-8bf1ecd717b8-173a52a9bde",
            "name": "bim",
            "type": "scene",
            "children": []
          }
        ]
      }
    },
    "EndPointNodeAttribut": {
      "type": "object",
      "properties": {
        "dynamicId": {
          "type": "integer"
        },
        "staticId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "attributs": {
          "type": "array",
          "items": {
            "anyOf": [
              {
                "$ref": "#/definitions/EndPointAttributs"
              }
            ]
          }
        }
      }
    },
    "EndPointAttributs": {
      "type": "object",
      "properties": {
        "label": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "date": {
          "type": "integer"
        },
        "type": {
          "type": "string"
        },
        "unit": {
          "type": "integer"
        }
      }
    },
    "CurrentValue": {
      "type": "object",
      "properties": {
        "currentValue": {
          "type": "integer"
        }
      }
    },
    "NewValue": {
      "type": "object",
      "properties": {
        "currentValue": {
          "type": "integer"
        }
      }
    },
    "Timeserie": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "value": {
            "type": "integer"
          }
        }
      }
    },
    "IoTNetworkNodeTypeList": {
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "Workflow": {
      "type": "object",
      "properties": {
        "dynamicId": {
          "type": "integer"
        },
        "staticId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "WorkflowTree": {
      "type": "object",
      "properties": {
        "dynamicId": {
          "type": "integer"
        },
        "staticId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "Workflow": {
          "type": "string"
        },
        "children": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WorkflowTree"
          }
        }
      },
      "exemple": {
        "dynamicId": 377295296,
        "staticId": "SpinalContext-b61aca38-c262-56bd-9b3b-72fba07999a4-173a52a9bd8",
        "name": "Scenes",
        "type": "SpinalService",
        "context": "SpinalContext",
        "children": [
          {
            "dynamicId": 377301280,
            "staticId": "SpinalNode-c04c8302-ef21-7fa1-3435-8bf1ecd717b8-173a52a9bde",
            "name": "bim",
            "type": "scene",
            "children": []
          }
        ]
      }
    },
    "Step": {
      "type": "object",
      "properties": {
        "dynamicId": {
          "type": "integer"
        },
        "staticId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "color": {
          "type": "string"
        },
        "order": {
          "type": "integer"
        },
        "processId": {
          "type": "string"
        }
      }
    },
    "TicketDetails": {
      "type": "object",
      "properties": {
        "dynamicId": {
          "type": "number"
        },
        "staticId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "priority": {
          "type": "integer"
        },
        "creationDate": {
          "type": "integer"
        },
        "elementSelectedId": {
          "type": "integer"
        },
        "userName": {
          "type": "string"
        },
        "Step": {
          "type": "object",
          "properties": {
            "dynamicId": {
              "type": "number"
            },
            "staticId": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "type": {
              "type": "string"
            },
            "color": {
              "type": "string"
            },
            "order": {
              "type": "string"
            }
          }
        },
        "workflowDynamicId": {
          "type": "integer"
        },
        "workflowName": {
          "type": "string"
        },
        "Annotation_list": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Note"
          }
        },
        "file_list": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/File"
          }
        },
        "log_list": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LogTicket"
          }
        }
      }
    },
    "Ticket": {
      "type": "object",
      "properties": {
        "dynamicId": {
          "type": "integer"
        },
        "staticId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "BasicNode": {
      "type": "object",
      "properties": {
        "dynamicId": {
          "type": "integer"
        },
        "staticId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "Process": {
      "type": "object",
      "properties": {
        "dynamicId": {
          "type": "integer"
        },
        "staticId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "LogTicket": {
      "type": "object",
      "properties": {
        "userName": {
          "type": "string"
        },
        "date": {
          "type": "number"
        },
        "event": {
          "type": "number"
        },
        "ticketStaticId": {
          "type": "string"
        }
      }
    },
    "WorkflowNodeTypeList": {
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "ContextEvent": {
      "type": "object",
      "properties": {
        "dynamicId": {
          "type": "integer"
        },
        "staticId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "CategoryEvent": {
      "type": "object",
      "properties": {
        "dynamicId": {
          "type": "integer"
        },
        "staticId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "GroupEvent": {
      "type": "object",
      "properties": {
        "dynamicId": {
          "type": "integer"
        },
        "staticId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "Event": {
      "type": "object",
      "properties": {
        "dynamicId": {
          "type": "integer"
        },
        "staticId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "groupeId": {
          "type": "string"
        },
        "categoryId": {
          "type": "string"
        },
        "nodeId": {
          "type": "string"
        },
        "repeat": {
          "type": "boolean"
        },
        "description": {
          "type": "string"
        },
        "startDate": {
          "type": "string"
        },
        "endDate": {
          "type": "string"
        },
        "creationDate": {
          "type": "string"
        },
        "user": {
          "type": "object"
        }
      }
    },
    "TypeListGroupContext": {
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "GetBimObjectsInfo": {
      "type": "object",
      "properties": {
        "bimFileId": {
          "description": "serverId or staticId of the BimFile",
          "type": ["integer", "string"]
        },
        "bimObjects": {
          "description": "dbIds in the viewer",
          "type": "array",
          "items": {
            "type": "integer"
          }
        }
      },
      "required": ["bimFileId", "bimObjects"]
    },
    "BimObjectsInfo": {
      "type": "object",
      "properties": {
        "bimFile": {
          "description": "mini definition of bimFile",
          "$ref": "#/definitions/BimObjectsInfo/BimFile"
        },
        "bimObjects": {
          "description": "nodes found in the graph",
          "type": "array",
          "items": {
            "$ref": "#/definitions/BimObjectsInfo/BimObjectsItem"
          }
        },
        "notFound": {
          "description": "if the dbId is not found in the graph",
          "type": "array",
          "items": {
            "type": "integer"
          }
        }
      },
      "required": ["code", "bimObjects", "notFound"],
      "BimFile": {
        "type": "object",
        "properties": {
          "dynamicId": {
            "type": "number"
          },
          "staticId": {
            "type": "number"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "required": ["dynamicId", "staticId", "name", "type"]
      },
      "BimObjectsItem": {
        "allOf": [
          {
            "$ref": "#/definitions/Node"
          },
          {
            "type": "object",
            "properties": {
              "externalId": {
                "type": "number"
              },
              "dbid": {
                "type": "number"
              },
              "bimFileId": {
                "type": "string"
              },
              "version": {
                "type": "string"
              }
            },
            "required": ["externalId", "dbid", "bimFileId", "version"]
          }
        ]
      }
    },
    "SceneListReturn": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string"
        },
        "body": {
          "type": "object",
          "properties": {
            "dynamicId": {
              "type": "integer"
            },
            "staticId": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "type": {
              "type": "string"
            },
            "autoLoad": {
              "type": "boolean"
            },
            "scenesItems": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "dynamicId": {
                    "type": "integer"
                  },
                  "staticId": {
                    "type": "string"
                  },
                  "item": {
                    "type": "string"
                  }
                }
              }
            },
            "useAllDT": {
              "type": "boolean"
            },
            "options": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "urn": {
                    "type": "string"
                  },
                  "loadOption": {
                    "type": "object",
                    "properties": {
                      "globalOffset": {
                        "type": "object",
                        "properties": {
                          "x": {
                            "type": "number"
                          },
                          "y": {
                            "type": "number"
                          },
                          "z": {
                            "type": "number"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "SceneInfo": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string"
        },
        "body": {
          "type": "object",
          "properties": {
            "dynamicId": {
              "type": "integer"
            },
            "staticId": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "type": {
              "type": "string"
            },
            "autoLoad": {
              "type": "boolean"
            },
            "scenesItems": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "dynamicId": {
                    "type": "integer"
                  },
                  "staticId": {
                    "type": "string"
                  },
                  "item": {
                    "type": "string"
                  }
                }
              }
            },
            "useAllDT": {
              "type": "boolean"
            },
            "options": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "urn": {
                    "type": "string"
                  },
                  "loadOption": {
                    "type": "object",
                    "properties": {
                      "globalOffset": {
                        "type": "object",
                        "properties": {
                          "x": {
                            "type": "number"
                          },
                          "y": {
                            "type": "number"
                          },
                          "z": {
                            "type": "number"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "File": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "fileId": {
          "type": "integer"
        }
      }
    }
  },
  "tags": [
    {
      "name": "Nodes"
    },
    {
      "name": "Node Attribut Categories"
    }
  ]
}
